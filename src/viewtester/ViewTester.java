/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewtester;

import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfFloat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Range;
import org.opencv.core.Rect;
import org.opencv.core.RotatedRect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.Videoio;

/**
 *
 * @author pavel.svihalek
 */
public class ViewTester extends javax.swing.JFrame {

    File currentDir;
    BufferedImage inputImage;
    BufferedImage outputImage;
    Mat inputMat;
    Mat outputMat;
    Mat templateMat;
    Mat segmentMaskMat;
    Mat maskFile = null;
    private static final String TEMPLATE_WIN_NAME = new String("Vzor k porovnani");
    private static final String TEMPLATE_VYSTUP = new String("Vysledek");
    private final int CAMERAWIDTH = 640;
    private final int CAMERAHEIGHT = 480;
    VideoCapture grabber;
// pomìr displeje: 3,1165

    /**
     * Creates new form ViewTester
     */
    public ViewTester() {
        inputMat = new Mat();
        outputMat = new Mat();
        readInputFromFile("disp3.jpg");
        inputImage = MatToBufferedImage(inputMat);
        outputImage = MatToBufferedImage(outputMat);

        initComponents();

        // inicializace kamery
        grabber = initGrabber(0);
        if (grabber == null) {
            this.jButton_toolBar_vyfotit.setEnabled(false);
        }

        pack();
    }

    public BufferedImage MatToBufferedImage(Mat frame) {
        int type = 0;
        if (frame.channels() == 1) {
            type = BufferedImage.TYPE_BYTE_GRAY;
        } else if (frame.channels() == 3) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        BufferedImage image = new BufferedImage(frame.width(), frame.height(), type);
        WritableRaster raster = image.getRaster();
        DataBufferByte dataBuffer = (DataBufferByte) raster.getDataBuffer();
        byte[] data = dataBuffer.getData();
        frame.get(0, 0, data);

        return image;
    }

    /**
     * nahraje obrazek jako Mat ze souboru
     *
     * @param fileName
     * @return
     */
    boolean readInputFromFile(String fileName) {
        inputMat = Imgcodecs.imread(fileName);
        if (inputMat.empty()) {
            System.err.println("Nelze nacist obrazek: " + fileName);
            return false;
        }
        outputMat = inputMat.clone();
        outToGrayScale();
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup_prahovani = new javax.swing.ButtonGroup();
        buttonGroup_porovnani = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        jLabel_info = new javax.swing.JLabel();
        jToolBar = new javax.swing.JToolBar();
        jPanelToolBarBasic = new javax.swing.JPanel();
        jButton_toolBar_vyfotit = new javax.swing.JButton();
        jButton_toolBar_zeSouboru = new javax.swing.JButton();
        jButton_toolBar_outputAsInput = new javax.swing.JButton();
        jButton_toolBar_toGrayScalled = new javax.swing.JButton();
        jTabbedPane_nastroje = new javax.swing.JTabbedPane();
        jPanel_toolBar_prahovani = new javax.swing.JPanel();
        jSlider_toolBar_prahovani_mez = new javax.swing.JSlider();
        jTextField_toolBar_prahovani_maxVal = new javax.swing.JTextField();
        jRadioButton_toolBar_prahovani_binary = new javax.swing.JRadioButton();
        jRadioButton_toolbar_prahovani_binaryInv = new javax.swing.JRadioButton();
        jRadioButton_toolBar_prahovani_tozero = new javax.swing.JRadioButton();
        jRadioButton_toolbar_prahovani_tozeroInv = new javax.swing.JRadioButton();
        jRadioButton_toolBar_prahovani_otsu = new javax.swing.JRadioButton();
        jRadioButton_toolbar_prahovani_truncate = new javax.swing.JRadioButton();
        jRadioButton_toolbar_prahovani_triangle = new javax.swing.JRadioButton();
        jRadioButton_toolBar_prahovani_adaptiveMeanC = new javax.swing.JRadioButton();
        jRadioButton_toolBar_prahovani_adaptivniGaussianC = new javax.swing.JRadioButton();
        jButton_toolBar_prahovani_prahovat = new javax.swing.JButton();
        jSlider_toolBar_prahovani_blockSize = new javax.swing.JSlider();
        jTextField_toolBar_prahovani_offset = new javax.swing.JTextField();
        jRadioButton_toolBar_prahovani_band = new javax.swing.JRadioButton();
        jSlider_toolBar_prahovani_bandPrah2 = new javax.swing.JSlider();
        jButton_toolbar_prahovani_ekvalizeHist = new javax.swing.JButton();
        jPanel_toolbar_prahovani_rozdeleni = new javax.swing.JPanel();
        jSpinner_toolbar_prahovani_rozdeleniX = new javax.swing.JSpinner();
        jLabel_rozdeleni_x = new javax.swing.JLabel();
        jSpinner_toolbar_prahovani_rozdeleniY = new javax.swing.JSpinner();
        jPanel_Morfologie = new javax.swing.JPanel();
        jButton_morfologie_rozsireni = new javax.swing.JButton();
        jButton_morfologie_zuzeni = new javax.swing.JButton();
        jPanel_morfologie_element = new javax.swing.JPanel();
        jSpinner_morfologie_elementX = new javax.swing.JSpinner();
        jLabel_morfologie_element_krat = new javax.swing.JLabel();
        jSpinner_morfologie_elementY = new javax.swing.JSpinner();
        jButton_morfologie_otevreni = new javax.swing.JButton();
        jButton_morfologie_zavreni = new javax.swing.JButton();
        jButton_morfologie_findContours = new javax.swing.JButton();
        jSlider_morfologie_findThreshold = new javax.swing.JSlider();
        jToggleButton_morfologie_objektPodMysi = new javax.swing.JToggleButton();
        jButton_morfologie_vsechny = new javax.swing.JButton();
        jPanel_transformace = new javax.swing.JPanel();
        jPanel_transformace_translace = new javax.swing.JPanel();
        jButton_transformace_translace = new javax.swing.JButton();
        jLabel_translaceX = new javax.swing.JLabel();
        jSpinner_transformace_translateX = new javax.swing.JSpinner();
        jLabel_translaceY = new javax.swing.JLabel();
        jSpinner_transformace_translateY = new javax.swing.JSpinner();
        jPanel_transformace_meritko = new javax.swing.JPanel();
        jButton_transformace_meritko = new javax.swing.JButton();
        jLabel_meritkoX = new javax.swing.JLabel();
        jSpinner_transformace_meritkoX = new javax.swing.JSpinner();
        jLabel_meritkoY = new javax.swing.JLabel();
        jSpinner_transformace_meritkoY = new javax.swing.JSpinner();
        jPanel_transformace_otoceni = new javax.swing.JPanel();
        jButton_transformace_otoceni = new javax.swing.JButton();
        jSlider_transformace_otoceni = new javax.swing.JSlider();
        jPanel_transformace_zkosit = new javax.swing.JPanel();
        jButton_transformace_zkosit = new javax.swing.JButton();
        jSlider_transformace_zkosit = new javax.swing.JSlider();
        jPanel_transformace_preddef = new javax.swing.JPanel();
        jButton_transformace_vyrovnej = new javax.swing.JButton();
        jButton_transformace_orizni = new javax.swing.JButton();
        jPanel_porovnani = new javax.swing.JPanel();
        jButton_porovnani_vyberVzor = new javax.swing.JButton();
        jButton_porovnani_porovnej = new javax.swing.JButton();
        jRadioButton_porovnani_SQDIFF = new javax.swing.JRadioButton();
        jRadioButton_porovnani_SQDIFFNorm = new javax.swing.JRadioButton();
        jRadioButton_porovnani_CCOR = new javax.swing.JRadioButton();
        jRadioButton_porovnani_CCORNorm = new javax.swing.JRadioButton();
        jRadioButton_porovnani_CCOEFF = new javax.swing.JRadioButton();
        jRadioButton_porovnani_CCOEFFNorm = new javax.swing.JRadioButton();
        jButton_porovnani_porovnejHistogram = new javax.swing.JButton();
        jButton_porovnani_ukazRozdily = new javax.swing.JButton();
        jPanel_hrany = new javax.swing.JPanel();
        jPanel_hrany_sobel = new javax.swing.JPanel();
        jButton_hrany_Sobel = new javax.swing.JButton();
        jCheckBox_hrany_sobel_horizontalne = new javax.swing.JCheckBox();
        jCheckBox_hrany_sobel_vertikalne = new javax.swing.JCheckBox();
        jPanel_hrany_laplacianGaussian = new javax.swing.JPanel();
        jButton_hrany_laplacianGaussian = new javax.swing.JButton();
        jCheckBox_hrany_laplacianGaussian_Gaussian = new javax.swing.JCheckBox();
        jCheckBox_hrany_laplacianGaussian_laplacian = new javax.swing.JCheckBox();
        jSpinner_hrany_laplacianGaussian_gaussX = new javax.swing.JSpinner();
        jLabel_hrany_laplacianGaussian_x = new javax.swing.JLabel();
        jSpinner_hrany_laplacianGaussian_gaussY = new javax.swing.JSpinner();
        jLabel_hrany_laplacianGaussian_sigma = new javax.swing.JLabel();
        jTextField_hrany_laplacianGaussian_sigma = new javax.swing.JTextField();
        jSpinner_hrany_laplacianGaussian_laplacianHloubka = new javax.swing.JSpinner();
        jLabel_hrany_laplacianGaussian_laplacianHloubka = new javax.swing.JLabel();
        jButton_hrany_laplacianGaussian_zostreni = new javax.swing.JButton();
        jPanel_hrany_canny = new javax.swing.JPanel();
        jButton_hrany_canny = new javax.swing.JButton();
        jSlider_hrany_canny_dolniMez = new javax.swing.JSlider();
        jSlider_hrany_canny_horniMez = new javax.swing.JSlider();
        jPanel_hrany_hough = new javax.swing.JPanel();
        jButton_hrany_hough_houghLinesP = new javax.swing.JButton();
        jLabel_hough_prah = new javax.swing.JLabel();
        jSpinner_hrany_hough_prah = new javax.swing.JSpinner();
        jLabel_hough_minDelka = new javax.swing.JLabel();
        jSpinner_hrany_hough_minLen = new javax.swing.JSpinner();
        jSpinner_hrany_hough_maxGap = new javax.swing.JSpinner();
        jLabel_hough_maxGap = new javax.swing.JLabel();
        jPanel_hrany_obrysy = new javax.swing.JPanel();
        jButton_hrany_extractContours = new javax.swing.JButton();
        jCheckBox_hrany_obrysy_pravouhle = new javax.swing.JCheckBox();
        jPanel_rohy = new javax.swing.JPanel();
        jPanel_rohy_harris = new javax.swing.JPanel();
        jButton_rohy_harris_cornerHarris = new javax.swing.JButton();
        jSlider_rohy_harris_threshold = new javax.swing.JSlider();
        jSpinner_rohy_harris_blockSize = new javax.swing.JSpinner();
        jSpinner_rohy_harris_vyrez = new javax.swing.JSpinner();
        jPanel_rohy_shiTomasi = new javax.swing.JPanel();
        jButton_rohy_shiTomasi = new javax.swing.JButton();
        jSlider_rohy_shiTomasi_maxCorner = new javax.swing.JSlider();
        jPanel_kontrolaSegmentu = new javax.swing.JPanel();
        jPanel_kontrolaSegmentu_orezAVyrovnej = new javax.swing.JPanel();
        jLabel_kontrolaSegmentu_orez_roh1 = new javax.swing.JLabel();
        jLabel_kontrolaSegmentu_orez_roh2 = new javax.swing.JLabel();
        jLabel_kontrolaSegmentu_orez_roh3 = new javax.swing.JLabel();
        jLabel_kontrolaSegmentu_orez_roh4 = new javax.swing.JLabel();
        jButton_kontrolaSegmentu_orez_proved = new javax.swing.JButton();
        jSpinner_kontrolaSegmentu_orez_roh1x = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh1y = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh2x = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh2y = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh3x = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh3y = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh4x = new javax.swing.JSpinner();
        jSpinner_kontrolaSegmentu_orez_roh4y = new javax.swing.JSpinner();
        jComboBox_kontrolaSegmentu_orez_rozliseni = new javax.swing.JComboBox<>();
        jPanel_kontrolaSegmentu_maskovani = new javax.swing.JPanel();
        jButton_kontrolaSegmentu_maskuj = new javax.swing.JButton();
        jButton_kontrolaSegmentu_souborMasky = new javax.swing.JButton();
        jCheckBox_kontrolaSegmentu_invertujMasku = new javax.swing.JCheckBox();
        jButton_kontrolaSegmentu_toBinary = new javax.swing.JButton();
        jPanel_kontrolaSegmentu_vyhodnoceni = new javax.swing.JPanel();
        jButton_kontrolaSegmentu_vyhodnoceni_segmentovySoubor = new javax.swing.JButton();
        jButton_kontrolaSegmentu_vyhodnoceni_vycisli = new javax.swing.JButton();
        jPanel_analyzaBarev = new javax.swing.JPanel();
        jToggleButton_analyzaBarev_viewColor = new javax.swing.JToggleButton();
        jPanel_analyzaBarev_prevzorkuj = new javax.swing.JPanel();
        jButton_analyzaBarev_prevzorkujBarvy = new javax.swing.JButton();
        jSlider_analyzaBarev_prevzorkuj = new javax.swing.JSlider();
        jButton_analyzaBarev_nejBarva = new javax.swing.JButton();
        jButton_analyzabarev_nej2 = new javax.swing.JButton();
        jButton_analyzaBarev_viewR = new javax.swing.JButton();
        jButton_analyzaBarev_viewG = new javax.swing.JButton();
        jButton_analyzaBarev_viewB = new javax.swing.JButton();
        jButton_toolbar_invertColors = new javax.swing.JButton();
        jButton_toolbar_toColourScheme = new javax.swing.JButton();
        jButton_toolbar_zoomPlus = new javax.swing.JButton();
        jButton_toolbar_zoomMinus = new javax.swing.JButton();
        jPanelObrazky = new JPanel_DoubleImage(inputImage, outputImage);

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tester funkci OpenCV knihovny");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel_info.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_info.setText(">");
        getContentPane().add(jLabel_info, java.awt.BorderLayout.PAGE_END);

        jToolBar.setRollover(true);

        jPanelToolBarBasic.setLayout(new java.awt.GridBagLayout());

        jButton_toolBar_vyfotit.setText("Vyfotit");
        jButton_toolBar_vyfotit.setFocusable(false);
        jButton_toolBar_vyfotit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_toolBar_vyfotit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_toolBar_vyfotit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolBar_vyfotitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanelToolBarBasic.add(jButton_toolBar_vyfotit, gridBagConstraints);

        jButton_toolBar_zeSouboru.setText("Ze souboru");
        jButton_toolBar_zeSouboru.setFocusable(false);
        jButton_toolBar_zeSouboru.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_toolBar_zeSouboru.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_toolBar_zeSouboru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolBar_zeSouboruActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanelToolBarBasic.add(jButton_toolBar_zeSouboru, gridBagConstraints);

        jButton_toolBar_outputAsInput.setText("Výstup jako vstup");
        jButton_toolBar_outputAsInput.setFocusable(false);
        jButton_toolBar_outputAsInput.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_toolBar_outputAsInput.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_toolBar_outputAsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolBar_outputAsInputActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanelToolBarBasic.add(jButton_toolBar_outputAsInput, gridBagConstraints);

        jButton_toolBar_toGrayScalled.setText("--> ÈB");
        jButton_toolBar_toGrayScalled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolBar_toGrayScalledActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanelToolBarBasic.add(jButton_toolBar_toGrayScalled, gridBagConstraints);

        jPanel_toolBar_prahovani.setMaximumSize(new java.awt.Dimension(800, 150));
        jPanel_toolBar_prahovani.setPreferredSize(new java.awt.Dimension(800, 150));

        jSlider_toolBar_prahovani_mez.setMajorTickSpacing(32);
        jSlider_toolBar_prahovani_mez.setMaximum(255);
        jSlider_toolBar_prahovani_mez.setMinorTickSpacing(8);
        jSlider_toolBar_prahovani_mez.setPaintLabels(true);
        jSlider_toolBar_prahovani_mez.setPaintTicks(true);
        jSlider_toolBar_prahovani_mez.setToolTipText("Prahová hodnota");
        jSlider_toolBar_prahovani_mez.setValue(120);
        jSlider_toolBar_prahovani_mez.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_toolBar_prahovani_mezStateChanged(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jSlider_toolBar_prahovani_mez);

        jTextField_toolBar_prahovani_maxVal.setColumns(4);
        jTextField_toolBar_prahovani_maxVal.setText("255");
        jTextField_toolBar_prahovani_maxVal.setToolTipText("Maximální hodnota");
        jTextField_toolBar_prahovani_maxVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_toolBar_prahovani_maxValActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jTextField_toolBar_prahovani_maxVal);

        buttonGroup_prahovani.add(jRadioButton_toolBar_prahovani_binary);
        jRadioButton_toolBar_prahovani_binary.setSelected(true);
        jRadioButton_toolBar_prahovani_binary.setText("BINARY");
        jRadioButton_toolBar_prahovani_binary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolBar_prahovani_binaryActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolBar_prahovani_binary);

        buttonGroup_prahovani.add(jRadioButton_toolbar_prahovani_binaryInv);
        jRadioButton_toolbar_prahovani_binaryInv.setText("BINARY_INV");
        jRadioButton_toolbar_prahovani_binaryInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolbar_prahovani_binaryInvActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolbar_prahovani_binaryInv);

        buttonGroup_prahovani.add(jRadioButton_toolBar_prahovani_tozero);
        jRadioButton_toolBar_prahovani_tozero.setText("TOZERO");
        jRadioButton_toolBar_prahovani_tozero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolBar_prahovani_tozeroActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolBar_prahovani_tozero);

        buttonGroup_prahovani.add(jRadioButton_toolbar_prahovani_tozeroInv);
        jRadioButton_toolbar_prahovani_tozeroInv.setText("TOZERO_INV");
        jRadioButton_toolbar_prahovani_tozeroInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolbar_prahovani_tozeroInvActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolbar_prahovani_tozeroInv);

        buttonGroup_prahovani.add(jRadioButton_toolBar_prahovani_otsu);
        jRadioButton_toolBar_prahovani_otsu.setText("OTSU");
        jRadioButton_toolBar_prahovani_otsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolBar_prahovani_otsuActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolBar_prahovani_otsu);

        buttonGroup_prahovani.add(jRadioButton_toolbar_prahovani_truncate);
        jRadioButton_toolbar_prahovani_truncate.setText("TRUNC");
        jRadioButton_toolbar_prahovani_truncate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolbar_prahovani_truncateActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolbar_prahovani_truncate);

        buttonGroup_prahovani.add(jRadioButton_toolbar_prahovani_triangle);
        jRadioButton_toolbar_prahovani_triangle.setText("Triangle");
        jRadioButton_toolbar_prahovani_triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolbar_prahovani_triangleActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolbar_prahovani_triangle);

        buttonGroup_prahovani.add(jRadioButton_toolBar_prahovani_adaptiveMeanC);
        jRadioButton_toolBar_prahovani_adaptiveMeanC.setText("Adaptivní MeanC");
        jRadioButton_toolBar_prahovani_adaptiveMeanC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolBar_prahovani_adaptiveMeanCActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolBar_prahovani_adaptiveMeanC);

        buttonGroup_prahovani.add(jRadioButton_toolBar_prahovani_adaptivniGaussianC);
        jRadioButton_toolBar_prahovani_adaptivniGaussianC.setText("Adaptivní GaussianC");
        jRadioButton_toolBar_prahovani_adaptivniGaussianC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolBar_prahovani_adaptivniGaussianCActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolBar_prahovani_adaptivniGaussianC);

        jButton_toolBar_prahovani_prahovat.setText("Prahovat");
        jButton_toolBar_prahovani_prahovat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolBar_prahovani_prahovatActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jButton_toolBar_prahovani_prahovat);

        jSlider_toolBar_prahovani_blockSize.setMajorTickSpacing(32);
        jSlider_toolBar_prahovani_blockSize.setMaximum(255);
        jSlider_toolBar_prahovani_blockSize.setMinimum(3);
        jSlider_toolBar_prahovani_blockSize.setMinorTickSpacing(2);
        jSlider_toolBar_prahovani_blockSize.setPaintLabels(true);
        jSlider_toolBar_prahovani_blockSize.setPaintTicks(true);
        jSlider_toolBar_prahovani_blockSize.setSnapToTicks(true);
        jSlider_toolBar_prahovani_blockSize.setToolTipText("Velikost bloku");
        jSlider_toolBar_prahovani_blockSize.setValue(51);
        jSlider_toolBar_prahovani_blockSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_toolBar_prahovani_blockSizeStateChanged(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jSlider_toolBar_prahovani_blockSize);

        jTextField_toolBar_prahovani_offset.setColumns(4);
        jTextField_toolBar_prahovani_offset.setText("0");
        jTextField_toolBar_prahovani_offset.setToolTipText("Offset");
        jTextField_toolBar_prahovani_offset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_toolBar_prahovani_offsetActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jTextField_toolBar_prahovani_offset);

        buttonGroup_prahovani.add(jRadioButton_toolBar_prahovani_band);
        jRadioButton_toolBar_prahovani_band.setText("Band");
        jRadioButton_toolBar_prahovani_band.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_toolBar_prahovani_bandActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jRadioButton_toolBar_prahovani_band);

        jSlider_toolBar_prahovani_bandPrah2.setMajorTickSpacing(32);
        jSlider_toolBar_prahovani_bandPrah2.setMaximum(255);
        jSlider_toolBar_prahovani_bandPrah2.setMinorTickSpacing(8);
        jSlider_toolBar_prahovani_bandPrah2.setPaintLabels(true);
        jSlider_toolBar_prahovani_bandPrah2.setPaintTicks(true);
        jSlider_toolBar_prahovani_bandPrah2.setToolTipText("High threshold pro Band");
        jSlider_toolBar_prahovani_bandPrah2.setValue(170);
        jSlider_toolBar_prahovani_bandPrah2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_toolBar_prahovani_bandPrah2StateChanged(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jSlider_toolBar_prahovani_bandPrah2);

        jButton_toolbar_prahovani_ekvalizeHist.setText("Vyrovnat histogram");
        jButton_toolbar_prahovani_ekvalizeHist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolbar_prahovani_ekvalizeHistActionPerformed(evt);
            }
        });
        jPanel_toolBar_prahovani.add(jButton_toolbar_prahovani_ekvalizeHist);

        jPanel_toolbar_prahovani_rozdeleni.setBorder(javax.swing.BorderFactory.createTitledBorder("Rozdìlit na"));
        jPanel_toolbar_prahovani_rozdeleni.setToolTipText("Pro prahování rozdìlí obraz na AxB èástí");

        jSpinner_toolbar_prahovani_rozdeleniX.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jPanel_toolbar_prahovani_rozdeleni.add(jSpinner_toolbar_prahovani_rozdeleniX);

        jLabel_rozdeleni_x.setText(" x ");
        jPanel_toolbar_prahovani_rozdeleni.add(jLabel_rozdeleni_x);

        jSpinner_toolbar_prahovani_rozdeleniY.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jPanel_toolbar_prahovani_rozdeleni.add(jSpinner_toolbar_prahovani_rozdeleniY);

        jPanel_toolBar_prahovani.add(jPanel_toolbar_prahovani_rozdeleni);

        jTabbedPane_nastroje.addTab("Prahování", jPanel_toolBar_prahovani);

        jButton_morfologie_rozsireni.setText("Rozíøení");
        jButton_morfologie_rozsireni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_morfologie_rozsireniActionPerformed(evt);
            }
        });
        jPanel_Morfologie.add(jButton_morfologie_rozsireni);

        jButton_morfologie_zuzeni.setText("Zúení");
        jButton_morfologie_zuzeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_morfologie_zuzeniActionPerformed(evt);
            }
        });
        jPanel_Morfologie.add(jButton_morfologie_zuzeni);

        jPanel_morfologie_element.setBorder(javax.swing.BorderFactory.createTitledBorder("Element"));

        jSpinner_morfologie_elementX.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 1));
        jPanel_morfologie_element.add(jSpinner_morfologie_elementX);

        jLabel_morfologie_element_krat.setText("x");
        jPanel_morfologie_element.add(jLabel_morfologie_element_krat);

        jSpinner_morfologie_elementY.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 1));
        jPanel_morfologie_element.add(jSpinner_morfologie_elementY);

        jPanel_Morfologie.add(jPanel_morfologie_element);

        jButton_morfologie_otevreni.setText("Otevøení");
        jButton_morfologie_otevreni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_morfologie_otevreniActionPerformed(evt);
            }
        });
        jPanel_Morfologie.add(jButton_morfologie_otevreni);

        jButton_morfologie_zavreni.setText("Zavøení");
        jButton_morfologie_zavreni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_morfologie_zavreniActionPerformed(evt);
            }
        });
        jPanel_Morfologie.add(jButton_morfologie_zavreni);

        jButton_morfologie_findContours.setText("Hledej objekty");
        jButton_morfologie_findContours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_morfologie_findContoursActionPerformed(evt);
            }
        });
        jPanel_Morfologie.add(jButton_morfologie_findContours);

        jSlider_morfologie_findThreshold.setMajorTickSpacing(32);
        jSlider_morfologie_findThreshold.setMaximum(255);
        jSlider_morfologie_findThreshold.setMinorTickSpacing(8);
        jSlider_morfologie_findThreshold.setPaintLabels(true);
        jSlider_morfologie_findThreshold.setPaintTicks(true);
        jSlider_morfologie_findThreshold.setToolTipText("Prah pro vyhledani objektu");
        jSlider_morfologie_findThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_morfologie_findThresholdStateChanged(evt);
            }
        });
        jPanel_Morfologie.add(jSlider_morfologie_findThreshold);

        jToggleButton_morfologie_objektPodMysi.setText("Objekt pod mysi");
        jPanel_Morfologie.add(jToggleButton_morfologie_objektPodMysi);

        jButton_morfologie_vsechny.setText("Vsechny");
        jButton_morfologie_vsechny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_morfologie_vsechnyActionPerformed(evt);
            }
        });
        jPanel_Morfologie.add(jButton_morfologie_vsechny);

        jTabbedPane_nastroje.addTab("Morfologie", jPanel_Morfologie);

        jPanel_transformace_translace.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_transformace_translace.setLayout(new java.awt.GridBagLayout());

        jButton_transformace_translace.setText("Posunutí");
        jButton_transformace_translace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transformace_translaceActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_transformace_translace.add(jButton_transformace_translace, gridBagConstraints);

        jLabel_translaceX.setText("X +");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_transformace_translace.add(jLabel_translaceX, gridBagConstraints);

        jSpinner_transformace_translateX.setModel(new javax.swing.SpinnerNumberModel());
        jSpinner_transformace_translateX.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinner_transformace_translateX.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinner_transformace_translateX, ""));
        jSpinner_transformace_translateX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_transformace_translateXStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        jPanel_transformace_translace.add(jSpinner_transformace_translateX, gridBagConstraints);

        jLabel_translaceY.setText("Y +");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel_transformace_translace.add(jLabel_translaceY, gridBagConstraints);

        jSpinner_transformace_translateY.setModel(new javax.swing.SpinnerNumberModel());
        jSpinner_transformace_translateY.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinner_transformace_translateY, ""));
        jSpinner_transformace_translateY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_transformace_translateYStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        jPanel_transformace_translace.add(jSpinner_transformace_translateY, gridBagConstraints);

        jPanel_transformace.add(jPanel_transformace_translace);

        jPanel_transformace_meritko.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_transformace_meritko.setLayout(new java.awt.GridBagLayout());

        jButton_transformace_meritko.setText("Zmìna mìøítka");
        jButton_transformace_meritko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transformace_meritkoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_transformace_meritko.add(jButton_transformace_meritko, gridBagConstraints);

        jLabel_meritkoX.setText("X x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_transformace_meritko.add(jLabel_meritkoX, gridBagConstraints);

        jSpinner_transformace_meritkoX.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 0.1d));
        jSpinner_transformace_meritkoX.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinner_transformace_meritkoX, ""));
        jSpinner_transformace_meritkoX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_transformace_meritkoXStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        jPanel_transformace_meritko.add(jSpinner_transformace_meritkoX, gridBagConstraints);

        jLabel_meritkoY.setText("Y x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel_transformace_meritko.add(jLabel_meritkoY, gridBagConstraints);

        jSpinner_transformace_meritkoY.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 0.1d));
        jSpinner_transformace_meritkoY.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinner_transformace_meritkoY, ""));
        jSpinner_transformace_meritkoY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_transformace_meritkoYStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        jPanel_transformace_meritko.add(jSpinner_transformace_meritkoY, gridBagConstraints);

        jPanel_transformace.add(jPanel_transformace_meritko);

        jPanel_transformace_otoceni.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_transformace_otoceni.setLayout(new java.awt.GridBagLayout());

        jButton_transformace_otoceni.setText("Otoèit");
        jButton_transformace_otoceni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transformace_otoceniActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_transformace_otoceni.add(jButton_transformace_otoceni, gridBagConstraints);

        jSlider_transformace_otoceni.setMajorTickSpacing(45);
        jSlider_transformace_otoceni.setMaximum(360);
        jSlider_transformace_otoceni.setMinorTickSpacing(15);
        jSlider_transformace_otoceni.setPaintLabels(true);
        jSlider_transformace_otoceni.setPaintTicks(true);
        jSlider_transformace_otoceni.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_transformace_otoceniStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_transformace_otoceni.add(jSlider_transformace_otoceni, gridBagConstraints);

        jPanel_transformace.add(jPanel_transformace_otoceni);

        jPanel_transformace_zkosit.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_transformace_zkosit.setLayout(new java.awt.GridBagLayout());

        jButton_transformace_zkosit.setText("Zkosit");
        jButton_transformace_zkosit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transformace_zkositActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_transformace_zkosit.add(jButton_transformace_zkosit, gridBagConstraints);

        jSlider_transformace_zkosit.setMajorTickSpacing(45);
        jSlider_transformace_zkosit.setMaximum(180);
        jSlider_transformace_zkosit.setMinorTickSpacing(5);
        jSlider_transformace_zkosit.setPaintLabels(true);
        jSlider_transformace_zkosit.setPaintTicks(true);
        jSlider_transformace_zkosit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_transformace_zkositStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_transformace_zkosit.add(jSlider_transformace_zkosit, gridBagConstraints);

        jPanel_transformace.add(jPanel_transformace_zkosit);

        jPanel_transformace_preddef.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton_transformace_vyrovnej.setText("Vyrovnej");
        jButton_transformace_vyrovnej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transformace_vyrovnejActionPerformed(evt);
            }
        });
        jPanel_transformace_preddef.add(jButton_transformace_vyrovnej);

        jButton_transformace_orizni.setText("Oøízni");
        jButton_transformace_orizni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_transformace_orizniActionPerformed(evt);
            }
        });
        jPanel_transformace_preddef.add(jButton_transformace_orizni);

        jPanel_transformace.add(jPanel_transformace_preddef);

        jTabbedPane_nastroje.addTab("Transformace", jPanel_transformace);

        jButton_porovnani_vyberVzor.setText("Vyber vzor");
        jButton_porovnani_vyberVzor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_porovnani_vyberVzorActionPerformed(evt);
            }
        });
        jPanel_porovnani.add(jButton_porovnani_vyberVzor);

        jButton_porovnani_porovnej.setText("Porovnej");
        jButton_porovnani_porovnej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_porovnani_porovnejActionPerformed(evt);
            }
        });
        jPanel_porovnani.add(jButton_porovnani_porovnej);

        buttonGroup_porovnani.add(jRadioButton_porovnani_SQDIFF);
        jRadioButton_porovnani_SQDIFF.setSelected(true);
        jRadioButton_porovnani_SQDIFF.setText("SQDIFF");
        jPanel_porovnani.add(jRadioButton_porovnani_SQDIFF);

        buttonGroup_porovnani.add(jRadioButton_porovnani_SQDIFFNorm);
        jRadioButton_porovnani_SQDIFFNorm.setText("SQDIFF Norm.");
        jPanel_porovnani.add(jRadioButton_porovnani_SQDIFFNorm);

        buttonGroup_porovnani.add(jRadioButton_porovnani_CCOR);
        jRadioButton_porovnani_CCOR.setText("CCOR");
        jPanel_porovnani.add(jRadioButton_porovnani_CCOR);

        buttonGroup_porovnani.add(jRadioButton_porovnani_CCORNorm);
        jRadioButton_porovnani_CCORNorm.setText("CCOR Norm.");
        jPanel_porovnani.add(jRadioButton_porovnani_CCORNorm);

        buttonGroup_porovnani.add(jRadioButton_porovnani_CCOEFF);
        jRadioButton_porovnani_CCOEFF.setText("CCOEFF");
        jPanel_porovnani.add(jRadioButton_porovnani_CCOEFF);

        buttonGroup_porovnani.add(jRadioButton_porovnani_CCOEFFNorm);
        jRadioButton_porovnani_CCOEFFNorm.setText("CCOEFF Norm.");
        jPanel_porovnani.add(jRadioButton_porovnani_CCOEFFNorm);

        jButton_porovnani_porovnejHistogram.setText("Porovnej Histogram");
        jButton_porovnani_porovnejHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_porovnani_porovnejHistogramActionPerformed(evt);
            }
        });
        jPanel_porovnani.add(jButton_porovnani_porovnejHistogram);

        jButton_porovnani_ukazRozdily.setText("Uka rozdíly");
        jButton_porovnani_ukazRozdily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_porovnani_ukazRozdilyActionPerformed(evt);
            }
        });
        jPanel_porovnani.add(jButton_porovnani_ukazRozdily);

        jTabbedPane_nastroje.addTab("Porovnání", jPanel_porovnani);

        jPanel_hrany_sobel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_hrany_sobel.setLayout(new java.awt.GridBagLayout());

        jButton_hrany_Sobel.setText("Sobel");
        jButton_hrany_Sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hrany_SobelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        jPanel_hrany_sobel.add(jButton_hrany_Sobel, gridBagConstraints);

        jCheckBox_hrany_sobel_horizontalne.setSelected(true);
        jCheckBox_hrany_sobel_horizontalne.setText("Horizontálnì");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel_hrany_sobel.add(jCheckBox_hrany_sobel_horizontalne, gridBagConstraints);

        jCheckBox_hrany_sobel_vertikalne.setText("Vertikálnì");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel_hrany_sobel.add(jCheckBox_hrany_sobel_vertikalne, gridBagConstraints);

        jPanel_hrany.add(jPanel_hrany_sobel);

        jPanel_hrany_laplacianGaussian.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_hrany_laplacianGaussian.setLayout(new java.awt.GridBagLayout());

        jButton_hrany_laplacianGaussian.setText("Laplacián Gaussiánu");
        jButton_hrany_laplacianGaussian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hrany_laplacianGaussianActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        jPanel_hrany_laplacianGaussian.add(jButton_hrany_laplacianGaussian, gridBagConstraints);

        jCheckBox_hrany_laplacianGaussian_Gaussian.setSelected(true);
        jCheckBox_hrany_laplacianGaussian_Gaussian.setText("Gaussián");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel_hrany_laplacianGaussian.add(jCheckBox_hrany_laplacianGaussian_Gaussian, gridBagConstraints);

        jCheckBox_hrany_laplacianGaussian_laplacian.setSelected(true);
        jCheckBox_hrany_laplacianGaussian_laplacian.setText("Laplacián");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel_hrany_laplacianGaussian.add(jCheckBox_hrany_laplacianGaussian_laplacian, gridBagConstraints);

        jSpinner_hrany_laplacianGaussian_gaussX.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel_hrany_laplacianGaussian.add(jSpinner_hrany_laplacianGaussian_gaussX, gridBagConstraints);

        jLabel_hrany_laplacianGaussian_x.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel_hrany_laplacianGaussian.add(jLabel_hrany_laplacianGaussian_x, gridBagConstraints);

        jSpinner_hrany_laplacianGaussian_gaussY.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel_hrany_laplacianGaussian.add(jSpinner_hrany_laplacianGaussian_gaussY, gridBagConstraints);

        jLabel_hrany_laplacianGaussian_sigma.setText("sigma");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel_hrany_laplacianGaussian.add(jLabel_hrany_laplacianGaussian_sigma, gridBagConstraints);

        jTextField_hrany_laplacianGaussian_sigma.setText("1.5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_hrany_laplacianGaussian.add(jTextField_hrany_laplacianGaussian_sigma, gridBagConstraints);

        jSpinner_hrany_laplacianGaussian_laplacianHloubka.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 2));
        jSpinner_hrany_laplacianGaussian_laplacianHloubka.setToolTipText("Velikost pro filtr druhe derivace");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        jPanel_hrany_laplacianGaussian.add(jSpinner_hrany_laplacianGaussian_laplacianHloubka, gridBagConstraints);

        jLabel_hrany_laplacianGaussian_laplacianHloubka.setText("velikost");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jPanel_hrany_laplacianGaussian.add(jLabel_hrany_laplacianGaussian_laplacianHloubka, gridBagConstraints);

        jButton_hrany_laplacianGaussian_zostreni.setText("Zostøení");
        jButton_hrany_laplacianGaussian_zostreni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hrany_laplacianGaussian_zostreniActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_hrany_laplacianGaussian.add(jButton_hrany_laplacianGaussian_zostreni, gridBagConstraints);

        jPanel_hrany.add(jPanel_hrany_laplacianGaussian);

        jPanel_hrany_canny.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_hrany_canny.setLayout(new java.awt.GridBagLayout());

        jButton_hrany_canny.setText("Canny");
        jButton_hrany_canny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hrany_cannyActionPerformed(evt);
            }
        });
        jPanel_hrany_canny.add(jButton_hrany_canny, new java.awt.GridBagConstraints());

        jSlider_hrany_canny_dolniMez.setMajorTickSpacing(32);
        jSlider_hrany_canny_dolniMez.setMaximum(255);
        jSlider_hrany_canny_dolniMez.setMinorTickSpacing(16);
        jSlider_hrany_canny_dolniMez.setPaintLabels(true);
        jSlider_hrany_canny_dolniMez.setPaintTicks(true);
        jSlider_hrany_canny_dolniMez.setToolTipText("dolni prah");
        jSlider_hrany_canny_dolniMez.setValue(100);
        jSlider_hrany_canny_dolniMez.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_hrany_canny_dolniMezStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_hrany_canny.add(jSlider_hrany_canny_dolniMez, gridBagConstraints);

        jSlider_hrany_canny_horniMez.setMajorTickSpacing(32);
        jSlider_hrany_canny_horniMez.setMaximum(255);
        jSlider_hrany_canny_horniMez.setMinorTickSpacing(16);
        jSlider_hrany_canny_horniMez.setPaintLabels(true);
        jSlider_hrany_canny_horniMez.setPaintTicks(true);
        jSlider_hrany_canny_horniMez.setToolTipText("horni prah");
        jSlider_hrany_canny_horniMez.setValue(200);
        jSlider_hrany_canny_horniMez.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_hrany_canny_horniMezStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel_hrany_canny.add(jSlider_hrany_canny_horniMez, gridBagConstraints);

        jPanel_hrany.add(jPanel_hrany_canny);

        jPanel_hrany_hough.setBorder(javax.swing.BorderFactory.createTitledBorder("Hough"));
        jPanel_hrany_hough.setLayout(new java.awt.GridBagLayout());

        jButton_hrany_hough_houghLinesP.setText("Najdi èáry");
        jButton_hrany_hough_houghLinesP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hrany_hough_houghLinesPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        jPanel_hrany_hough.add(jButton_hrany_hough_houghLinesP, gridBagConstraints);

        jLabel_hough_prah.setText("Práh");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_hrany_hough.add(jLabel_hough_prah, gridBagConstraints);

        jSpinner_hrany_hough_prah.setModel(new javax.swing.SpinnerNumberModel(20, 1, null, 1));
        jSpinner_hrany_hough_prah.setMinimumSize(new java.awt.Dimension(50, 20));
        jSpinner_hrany_hough_prah.setPreferredSize(new java.awt.Dimension(50, 20));
        jSpinner_hrany_hough_prah.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_hrany_hough_prahStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_hrany_hough.add(jSpinner_hrany_hough_prah, gridBagConstraints);

        jLabel_hough_minDelka.setText("Min. délka");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_hrany_hough.add(jLabel_hough_minDelka, gridBagConstraints);

        jSpinner_hrany_hough_minLen.setModel(new javax.swing.SpinnerNumberModel(20, 1, null, 1));
        jSpinner_hrany_hough_minLen.setMinimumSize(new java.awt.Dimension(50, 20));
        jSpinner_hrany_hough_minLen.setPreferredSize(new java.awt.Dimension(50, 20));
        jSpinner_hrany_hough_minLen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_hrany_hough_minLenStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_hrany_hough.add(jSpinner_hrany_hough_minLen, gridBagConstraints);

        jSpinner_hrany_hough_maxGap.setModel(new javax.swing.SpinnerNumberModel(3, 0, null, 1));
        jSpinner_hrany_hough_maxGap.setMinimumSize(new java.awt.Dimension(50, 20));
        jSpinner_hrany_hough_maxGap.setPreferredSize(new java.awt.Dimension(50, 20));
        jSpinner_hrany_hough_maxGap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_hrany_hough_maxGapStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_hrany_hough.add(jSpinner_hrany_hough_maxGap, gridBagConstraints);

        jLabel_hough_maxGap.setText("Max. mezera");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel_hrany_hough.add(jLabel_hough_maxGap, gridBagConstraints);

        jPanel_hrany.add(jPanel_hrany_hough);

        jPanel_hrany_obrysy.setLayout(new java.awt.GridBagLayout());

        jButton_hrany_extractContours.setText("Extrahuj obrysy");
        jButton_hrany_extractContours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_hrany_extractContoursActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_hrany_obrysy.add(jButton_hrany_extractContours, gridBagConstraints);

        jCheckBox_hrany_obrysy_pravouhle.setText("Pravoúhle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_hrany_obrysy.add(jCheckBox_hrany_obrysy_pravouhle, gridBagConstraints);

        jPanel_hrany.add(jPanel_hrany_obrysy);

        jTabbedPane_nastroje.addTab("Hrany", jPanel_hrany);

        jPanel_rohy_harris.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton_rohy_harris_cornerHarris.setText("Harris");
        jButton_rohy_harris_cornerHarris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_rohy_harris_cornerHarrisActionPerformed(evt);
            }
        });
        jPanel_rohy_harris.add(jButton_rohy_harris_cornerHarris);

        jSlider_rohy_harris_threshold.setMajorTickSpacing(32);
        jSlider_rohy_harris_threshold.setMaximum(255);
        jSlider_rohy_harris_threshold.setMinorTickSpacing(16);
        jSlider_rohy_harris_threshold.setPaintLabels(true);
        jSlider_rohy_harris_threshold.setPaintTicks(true);
        jSlider_rohy_harris_threshold.setValue(200);
        jSlider_rohy_harris_threshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_rohy_harris_thresholdStateChanged(evt);
            }
        });
        jPanel_rohy_harris.add(jSlider_rohy_harris_threshold);

        jSpinner_rohy_harris_blockSize.setModel(new javax.swing.SpinnerNumberModel(2, 1, null, 1));
        jSpinner_rohy_harris_blockSize.setToolTipText("Velikost bloku");
        jPanel_rohy_harris.add(jSpinner_rohy_harris_blockSize);

        jSpinner_rohy_harris_vyrez.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 2));
        jSpinner_rohy_harris_vyrez.setToolTipText("Pruzor");
        jPanel_rohy_harris.add(jSpinner_rohy_harris_vyrez);

        jPanel_rohy.add(jPanel_rohy_harris);

        jPanel_rohy_shiTomasi.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton_rohy_shiTomasi.setText("Shi-Tomasi");
        jButton_rohy_shiTomasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_rohy_shiTomasiActionPerformed(evt);
            }
        });
        jPanel_rohy_shiTomasi.add(jButton_rohy_shiTomasi);

        jSlider_rohy_shiTomasi_maxCorner.setMajorTickSpacing(100);
        jSlider_rohy_shiTomasi_maxCorner.setMaximum(1000);
        jSlider_rohy_shiTomasi_maxCorner.setMinimum(1);
        jSlider_rohy_shiTomasi_maxCorner.setMinorTickSpacing(25);
        jSlider_rohy_shiTomasi_maxCorner.setPaintLabels(true);
        jSlider_rohy_shiTomasi_maxCorner.setPaintTicks(true);
        jSlider_rohy_shiTomasi_maxCorner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_rohy_shiTomasi_maxCornerStateChanged(evt);
            }
        });
        jPanel_rohy_shiTomasi.add(jSlider_rohy_shiTomasi_maxCorner);

        jPanel_rohy.add(jPanel_rohy_shiTomasi);

        jTabbedPane_nastroje.addTab("Rohy", jPanel_rohy);

        jPanel_kontrolaSegmentu_orezAVyrovnej.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_kontrolaSegmentu_orezAVyrovnej.setLayout(new java.awt.GridBagLayout());

        jLabel_kontrolaSegmentu_orez_roh1.setText("1. roh");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jLabel_kontrolaSegmentu_orez_roh1, gridBagConstraints);

        jLabel_kontrolaSegmentu_orez_roh2.setText("2. roh");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jLabel_kontrolaSegmentu_orez_roh2, gridBagConstraints);

        jLabel_kontrolaSegmentu_orez_roh3.setText("3. roh");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jLabel_kontrolaSegmentu_orez_roh3, gridBagConstraints);

        jLabel_kontrolaSegmentu_orez_roh4.setText("4. roh");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jLabel_kontrolaSegmentu_orez_roh4, gridBagConstraints);

        jButton_kontrolaSegmentu_orez_proved.setText("Vyrovnej a oøe");
        jButton_kontrolaSegmentu_orez_proved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_kontrolaSegmentu_orez_provedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jButton_kontrolaSegmentu_orez_proved, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh1x.setModel(new javax.swing.SpinnerNumberModel(471, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh1x, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh1y.setModel(new javax.swing.SpinnerNumberModel(611, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh1y, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh2x.setModel(new javax.swing.SpinnerNumberModel(1354, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh2x, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh2y.setModel(new javax.swing.SpinnerNumberModel(614, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh2y, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh3x.setModel(new javax.swing.SpinnerNumberModel(470, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh3x, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh3y.setModel(new javax.swing.SpinnerNumberModel(880, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh3y, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh4x.setModel(new javax.swing.SpinnerNumberModel(1351, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh4x, gridBagConstraints);

        jSpinner_kontrolaSegmentu_orez_roh4y.setModel(new javax.swing.SpinnerNumberModel(882, null, null, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jSpinner_kontrolaSegmentu_orez_roh4y, gridBagConstraints);

        jComboBox_kontrolaSegmentu_orez_rozliseni.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "413 x 126", "827 x 252" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel_kontrolaSegmentu_orezAVyrovnej.add(jComboBox_kontrolaSegmentu_orez_rozliseni, gridBagConstraints);

        jPanel_kontrolaSegmentu.add(jPanel_kontrolaSegmentu_orezAVyrovnej);

        jPanel_kontrolaSegmentu_maskovani.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_kontrolaSegmentu_maskovani.setLayout(new java.awt.GridBagLayout());

        jButton_kontrolaSegmentu_maskuj.setText("Vymaskuj segmenty");
        jButton_kontrolaSegmentu_maskuj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_kontrolaSegmentu_maskujActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel_kontrolaSegmentu_maskovani.add(jButton_kontrolaSegmentu_maskuj, gridBagConstraints);

        jButton_kontrolaSegmentu_souborMasky.setText("Maskovaci soubor");
        jButton_kontrolaSegmentu_souborMasky.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_kontrolaSegmentu_souborMaskyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel_kontrolaSegmentu_maskovani.add(jButton_kontrolaSegmentu_souborMasky, gridBagConstraints);

        jCheckBox_kontrolaSegmentu_invertujMasku.setSelected(true);
        jCheckBox_kontrolaSegmentu_invertujMasku.setText("Invertuj masku");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_kontrolaSegmentu_maskovani.add(jCheckBox_kontrolaSegmentu_invertujMasku, gridBagConstraints);

        jPanel_kontrolaSegmentu.add(jPanel_kontrolaSegmentu_maskovani);

        jButton_kontrolaSegmentu_toBinary.setText("Zpracuj do ÈB");
        jButton_kontrolaSegmentu_toBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_kontrolaSegmentu_toBinaryActionPerformed(evt);
            }
        });
        jPanel_kontrolaSegmentu.add(jButton_kontrolaSegmentu_toBinary);

        jPanel_kontrolaSegmentu_vyhodnoceni.setBorder(javax.swing.BorderFactory.createTitledBorder("Vyhodnocení"));
        jPanel_kontrolaSegmentu_vyhodnoceni.setLayout(new java.awt.GridBagLayout());

        jButton_kontrolaSegmentu_vyhodnoceni_segmentovySoubor.setText("Segmentová maska");
        jButton_kontrolaSegmentu_vyhodnoceni_segmentovySoubor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_kontrolaSegmentu_vyhodnoceni_segmentovySouborActionPerformed(evt);
            }
        });
        jPanel_kontrolaSegmentu_vyhodnoceni.add(jButton_kontrolaSegmentu_vyhodnoceni_segmentovySoubor, new java.awt.GridBagConstraints());

        jButton_kontrolaSegmentu_vyhodnoceni_vycisli.setText("Vyhodno");
        jButton_kontrolaSegmentu_vyhodnoceni_vycisli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_kontrolaSegmentu_vyhodnoceni_vycisliActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel_kontrolaSegmentu_vyhodnoceni.add(jButton_kontrolaSegmentu_vyhodnoceni_vycisli, gridBagConstraints);

        jPanel_kontrolaSegmentu.add(jPanel_kontrolaSegmentu_vyhodnoceni);

        jTabbedPane_nastroje.addTab("Kontrola segmentù", jPanel_kontrolaSegmentu);

        jToggleButton_analyzaBarev_viewColor.setText("Ukázat barvu");
        jPanel_analyzaBarev.add(jToggleButton_analyzaBarev_viewColor);

        jPanel_analyzaBarev_prevzorkuj.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton_analyzaBarev_prevzorkujBarvy.setText("Uprav barvy");
        jButton_analyzaBarev_prevzorkujBarvy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_analyzaBarev_prevzorkujBarvyActionPerformed(evt);
            }
        });
        jPanel_analyzaBarev_prevzorkuj.add(jButton_analyzaBarev_prevzorkujBarvy);

        jSlider_analyzaBarev_prevzorkuj.setMajorTickSpacing(50);
        jSlider_analyzaBarev_prevzorkuj.setMaximum(250);
        jSlider_analyzaBarev_prevzorkuj.setMinorTickSpacing(25);
        jSlider_analyzaBarev_prevzorkuj.setPaintLabels(true);
        jSlider_analyzaBarev_prevzorkuj.setPaintTicks(true);
        jSlider_analyzaBarev_prevzorkuj.setValue(100);
        jSlider_analyzaBarev_prevzorkuj.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider_analyzaBarev_prevzorkujStateChanged(evt);
            }
        });
        jPanel_analyzaBarev_prevzorkuj.add(jSlider_analyzaBarev_prevzorkuj);

        jPanel_analyzaBarev.add(jPanel_analyzaBarev_prevzorkuj);

        jButton_analyzaBarev_nejBarva.setText("Nejvýznamnìjí barva");
        jButton_analyzaBarev_nejBarva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_analyzaBarev_nejBarvaActionPerformed(evt);
            }
        });
        jPanel_analyzaBarev.add(jButton_analyzaBarev_nejBarva);

        jButton_analyzabarev_nej2.setText("Nejvýznamnìjí 2");
        jButton_analyzabarev_nej2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_analyzabarev_nej2ActionPerformed(evt);
            }
        });
        jPanel_analyzaBarev.add(jButton_analyzabarev_nej2);

        jButton_analyzaBarev_viewR.setText("R");
        jButton_analyzaBarev_viewR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_analyzaBarev_viewRActionPerformed(evt);
            }
        });
        jPanel_analyzaBarev.add(jButton_analyzaBarev_viewR);

        jButton_analyzaBarev_viewG.setText("G");
        jButton_analyzaBarev_viewG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_analyzaBarev_viewGActionPerformed(evt);
            }
        });
        jPanel_analyzaBarev.add(jButton_analyzaBarev_viewG);

        jButton_analyzaBarev_viewB.setText("B");
        jButton_analyzaBarev_viewB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_analyzaBarev_viewBActionPerformed(evt);
            }
        });
        jPanel_analyzaBarev.add(jButton_analyzaBarev_viewB);

        jTabbedPane_nastroje.addTab("Analýza barev", jPanel_analyzaBarev);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        jPanelToolBarBasic.add(jTabbedPane_nastroje, gridBagConstraints);

        jButton_toolbar_invertColors.setText("Invertuj barvy");
        jButton_toolbar_invertColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolbar_invertColorsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanelToolBarBasic.add(jButton_toolbar_invertColors, gridBagConstraints);

        jButton_toolbar_toColourScheme.setText("--> Barevnì");
        jButton_toolbar_toColourScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolbar_toColourSchemeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanelToolBarBasic.add(jButton_toolbar_toColourScheme, gridBagConstraints);

        jButton_toolbar_zoomPlus.setText("+");
        jButton_toolbar_zoomPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolbar_zoomPlusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        jPanelToolBarBasic.add(jButton_toolbar_zoomPlus, gridBagConstraints);

        jButton_toolbar_zoomMinus.setText("-");
        jButton_toolbar_zoomMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_toolbar_zoomMinusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        jPanelToolBarBasic.add(jButton_toolbar_zoomMinus, gridBagConstraints);

        jToolBar.add(jPanelToolBarBasic);

        getContentPane().add(jToolBar, java.awt.BorderLayout.PAGE_START);

        jPanelObrazky.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelObrazkyMouseClicked(evt);
            }
        });
        jPanelObrazky.setLayout(new javax.swing.BoxLayout(jPanelObrazky, javax.swing.BoxLayout.X_AXIS));
        getContentPane().add(jPanelObrazky, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_toolBar_zeSouboruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolBar_zeSouboruActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Obrazky", "jpg", "bmp", "jpeg", "tif", "tiff", "png");
        fc.addChoosableFileFilter(filter);
        fc.setFileFilter(filter);
        fc.setDialogTitle("Vyberte soubor s obrazkem");
        try {
            if (currentDir == null) {
                currentDir = new File((new File(".").getCanonicalPath()));
                System.out.println("Adresar " + currentDir.getAbsolutePath());
            }
            fc.setCurrentDirectory(currentDir);
        } catch (IOException iOException) {
        }
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            currentDir = file.getParentFile();
            readInputFromFile(file.getPath());
            inputImage = MatToBufferedImage(inputMat);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageLeft(inputImage);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
            pack();
        }
    }//GEN-LAST:event_jButton_toolBar_zeSouboruActionPerformed

    private void jButton_toolBar_outputAsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolBar_outputAsInputActionPerformed
        inputImage = outputImage;
        inputMat = outputMat.clone();
        ((JPanel_DoubleImage) jPanelObrazky).setImageLeft(inputImage);
        ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
        repaint();
        jLabel_info.setText(">");
        pack();
    }//GEN-LAST:event_jButton_toolBar_outputAsInputActionPerformed

    private void jRadioButton_toolBar_prahovani_otsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolBar_prahovani_otsuActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolBar_prahovani_otsuActionPerformed

    private void jButton_toolBar_prahovani_prahovatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolBar_prahovani_prahovatActionPerformed
        prahujAction();
    }//GEN-LAST:event_jButton_toolBar_prahovani_prahovatActionPerformed

    private void jRadioButton_toolBar_prahovani_binaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolBar_prahovani_binaryActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolBar_prahovani_binaryActionPerformed

    private void jRadioButton_toolBar_prahovani_tozeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolBar_prahovani_tozeroActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolBar_prahovani_tozeroActionPerformed

    private void jRadioButton_toolBar_prahovani_adaptiveMeanCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolBar_prahovani_adaptiveMeanCActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolBar_prahovani_adaptiveMeanCActionPerformed

    private void jRadioButton_toolBar_prahovani_adaptivniGaussianCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolBar_prahovani_adaptivniGaussianCActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolBar_prahovani_adaptivniGaussianCActionPerformed

    private void jSlider_toolBar_prahovani_mezStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_toolBar_prahovani_mezStateChanged
        prahujAction();
    }//GEN-LAST:event_jSlider_toolBar_prahovani_mezStateChanged

    private void jTextField_toolBar_prahovani_maxValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_toolBar_prahovani_maxValActionPerformed
        prahujAction();
    }//GEN-LAST:event_jTextField_toolBar_prahovani_maxValActionPerformed

    private void jTextField_toolBar_prahovani_offsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_toolBar_prahovani_offsetActionPerformed
        prahujAction();
    }//GEN-LAST:event_jTextField_toolBar_prahovani_offsetActionPerformed

    private void jSlider_toolBar_prahovani_blockSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_toolBar_prahovani_blockSizeStateChanged
        prahujAction();
    }//GEN-LAST:event_jSlider_toolBar_prahovani_blockSizeStateChanged

    private void jSlider_toolBar_prahovani_bandPrah2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_toolBar_prahovani_bandPrah2StateChanged
        prahujAction();
    }//GEN-LAST:event_jSlider_toolBar_prahovani_bandPrah2StateChanged

    private void jRadioButton_toolBar_prahovani_bandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolBar_prahovani_bandActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolBar_prahovani_bandActionPerformed

    private void jButton_toolBar_vyfotitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolBar_vyfotitActionPerformed
        Mat readMat = new Mat();
        if (grabber.read(readMat)) {
            inputMat = readMat;
            inputImage = MatToBufferedImage(inputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageLeft(inputImage);
            repaint();
            jLabel_info.setText(">");
            pack();
        }
    }//GEN-LAST:event_jButton_toolBar_vyfotitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (grabber != null) {
            grabber.release();  // uvolnime kameru
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton_toolBar_toGrayScalledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolBar_toGrayScalledActionPerformed
        try {
            outputMat = inputMat.clone();
            outToGrayScale();
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
            pack();
        } catch (Exception e) {
            jLabel_info.setText("> CHYBA: " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_toolBar_toGrayScalledActionPerformed

    private void jButton_morfologie_rozsireniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_morfologie_rozsireniActionPerformed
        try {
            Mat matElement = new Mat((int) jSpinner_morfologie_elementX.getValue(), (int) jSpinner_morfologie_elementY.getValue(), CvType.CV_8U, Scalar.all(1));
            Imgproc.dilate(inputMat, outputMat, matElement);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_morfologie_rozsireniActionPerformed

    private void jButton_morfologie_zuzeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_morfologie_zuzeniActionPerformed
        try {
            Mat matElement = new Mat((int) jSpinner_morfologie_elementX.getValue(), (int) jSpinner_morfologie_elementY.getValue(), CvType.CV_8U, Scalar.all(1));
            Imgproc.erode(inputMat, outputMat, matElement);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_morfologie_zuzeniActionPerformed

    private void jButton_morfologie_otevreniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_morfologie_otevreniActionPerformed
        try {
            Mat matElement = new Mat((int) jSpinner_morfologie_elementX.getValue(), (int) jSpinner_morfologie_elementY.getValue(), CvType.CV_8U, Scalar.all(1));
            Imgproc.morphologyEx(inputMat, outputMat, Imgproc.MORPH_OPEN, matElement);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_morfologie_otevreniActionPerformed

    private void jButton_morfologie_zavreniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_morfologie_zavreniActionPerformed
        try {
            Mat matElement = new Mat((int) jSpinner_morfologie_elementX.getValue(), (int) jSpinner_morfologie_elementY.getValue(), CvType.CV_8U, Scalar.all(1));
            Imgproc.morphologyEx(inputMat, outputMat, Imgproc.MORPH_CLOSE, matElement);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_morfologie_zavreniActionPerformed

    private void jButton_toolbar_invertColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolbar_invertColorsActionPerformed
        try {
            Core.bitwise_not(inputMat, outputMat);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_toolbar_invertColorsActionPerformed

    private void jButton_morfologie_findContoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_morfologie_findContoursActionPerformed
        hledejObjektyAction();
    }//GEN-LAST:event_jButton_morfologie_findContoursActionPerformed

    private void jSlider_morfologie_findThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_morfologie_findThresholdStateChanged
        hledejObjektyAction();
    }//GEN-LAST:event_jSlider_morfologie_findThresholdStateChanged

    private void jPanelObrazkyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelObrazkyMouseClicked
        if (jToggleButton_morfologie_objektPodMysi.isSelected()) {
            viewObjects(evt);
        }
        if (jToggleButton_analyzaBarev_viewColor.isSelected()) {
            viewColor(evt);
        }
    }//GEN-LAST:event_jPanelObrazkyMouseClicked

    private void viewColor(MouseEvent evt) {
        int x;
        int y;
        int h;
        boolean prvni = true;
        double[] color;
        try {
            java.awt.Point p = evt.getPoint();
            x = p.x;
            y = p.y;
            // kontrola souradnic obrazku - prevedeme na vstupni obr. nebo konec
            if (x >= inputMat.width()) {
                x -= inputMat.width();
                prvni = false;
                if (x >= outputMat.width()) {
                    return;
                }
            }
            h = prvni ? inputMat.height() : outputMat.height();
            if (y >= h) {
                return;
            }
            Mat mat = prvni ? inputMat : outputMat;
            color = mat.get(y, x);
            if (color.length == 1) {
                jLabel_info.setText("> ÈB : " + color[0]);
            } else if (color.length == 3) {
                jLabel_info.setText("> R : " + color[2] + " G : " + color[1] + " B : " + color[0]);
            } else {
                jLabel_info.setText("> " + color);
            }

        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }

    /**
     * zobrazeni objektu na souradnici mysi nebo vsech
     *
     * @param evt pokud je null, tak vsechny
     */
    private void viewObjects(MouseEvent evt) {
        int x = 0;
        int y = 0;
        boolean vsechno = false;
        try {
            if (evt != null) {
                java.awt.Point p = evt.getPoint();
                x = p.x;
                y = p.y;
                // kontrola souradnic obrazku - prevedeme na vstupni obr. nebo konec
                if (x >= inputMat.width()) {
                    x -= inputMat.width();
                    if (x >= inputMat.width()) {
                        return;
                    }
                }
                if (y >= inputMat.height()) {
                    y -= inputMat.height();
                    if (y >= inputMat.height()) {
                        return;
                    }
                }
            } else {
                vsechno = true;
            }
            Point poi = new Point(x, y);
            MatOfPoint mop = new MatOfPoint(poi);
            Mat hierarchy = new Mat();

            List<MatOfPoint> contours = new ArrayList<>();
            Imgproc.findContours(inputMat, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_NONE);
            outputMat = Mat.zeros(inputMat.size(), CvType.CV_8UC3);
            Scalar color = new Scalar(0, 0, 256);
            for (int i = 0; i < contours.size(); i++) {
                if (vsechno || isPointInside(contours.get(i), poi, 3)) {
                    Imgproc.drawContours(outputMat, contours, i, color, 2, Imgproc.LINE_4, hierarchy, 0, new Point());
                }
            }

            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText("> Pocet objektu: " + contours.size());
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }

    private void jButton_morfologie_vsechnyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_morfologie_vsechnyActionPerformed
        viewObjects(null);
    }//GEN-LAST:event_jButton_morfologie_vsechnyActionPerformed

    private void jButton_transformace_translaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transformace_translaceActionPerformed
        Mat transformation = new Mat(2, 3, CvType.CV_32FC1, new Scalar(0));
        transformation.put(0, 0, 1);
        transformation.put(1, 1, 1);
        transformation.put(0, 2, (int) jSpinner_transformace_translateX.getValue());
        transformation.put(1, 2, (int) jSpinner_transformace_translateY.getValue());
        transformuj(transformation, true);
    }//GEN-LAST:event_jButton_transformace_translaceActionPerformed

    private void jButton_transformace_meritkoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transformace_meritkoActionPerformed
        Mat transformation = new Mat(2, 3, CvType.CV_32FC1, new Scalar(0));
        transformation.put(0, 0, (double) jSpinner_transformace_meritkoX.getValue());
        transformation.put(1, 1, (double) jSpinner_transformace_meritkoY.getValue());
        transformuj(transformation, true);
    }//GEN-LAST:event_jButton_transformace_meritkoActionPerformed

    private void jSpinner_transformace_meritkoXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_transformace_meritkoXStateChanged
        jButton_transformace_meritkoActionPerformed(null);
    }//GEN-LAST:event_jSpinner_transformace_meritkoXStateChanged

    private void jSpinner_transformace_meritkoYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_transformace_meritkoYStateChanged
        jButton_transformace_meritkoActionPerformed(null);
    }//GEN-LAST:event_jSpinner_transformace_meritkoYStateChanged

    private void jSpinner_transformace_translateXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_transformace_translateXStateChanged
        jButton_transformace_translaceActionPerformed(null);
    }//GEN-LAST:event_jSpinner_transformace_translateXStateChanged

    private void jSpinner_transformace_translateYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_transformace_translateYStateChanged
        jButton_transformace_translaceActionPerformed(null);
    }//GEN-LAST:event_jSpinner_transformace_translateYStateChanged

    private void jButton_transformace_otoceniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transformace_otoceniActionPerformed
        Mat transformation = new Mat(2, 3, CvType.CV_32FC1, new Scalar(0));
        Double fi = Math.PI / 180 * ((double) jSlider_transformace_otoceni.getValue());
        Double cosFi = Math.cos(fi);
        Double sinFi = Math.sin(fi);
        transformation.put(0, 0, cosFi);
        transformation.put(1, 1, cosFi);
        transformation.put(0, 1, sinFi);
        transformation.put(1, 0, (-1) * sinFi);
        transformuj(transformation, true);
    }//GEN-LAST:event_jButton_transformace_otoceniActionPerformed

    private void jSlider_transformace_otoceniStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_transformace_otoceniStateChanged
        jButton_transformace_otoceniActionPerformed(null);
    }//GEN-LAST:event_jSlider_transformace_otoceniStateChanged

    private void jButton_transformace_zkositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transformace_zkositActionPerformed
        Mat transformation = new Mat(2, 3, CvType.CV_32FC1, new Scalar(0));
        Double fi = Math.PI / 180 * ((double) jSlider_transformace_zkosit.getValue());
        Double tanFi = Math.tan(fi);
        transformation.put(0, 0, 1);
        transformation.put(1, 1, 1);
        transformation.put(0, 1, tanFi);
        transformuj(transformation, true);
    }//GEN-LAST:event_jButton_transformace_zkositActionPerformed

    private void jSlider_transformace_zkositStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_transformace_zkositStateChanged
        jButton_transformace_zkositActionPerformed(null);
    }//GEN-LAST:event_jSlider_transformace_zkositStateChanged

    private void jButton_transformace_vyrovnejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transformace_vyrovnejActionPerformed
        // nejprve si spocitame transformacni matici z vypozorovanych hodnot
        Point[] skutecna = new Point[4];
        Point[] cilova = new Point[4];
        Mat transformace = new Mat();
        skutecna[0] = new Point(4, 0);
        skutecna[1] = new Point(290, 5);
        skutecna[2] = new Point(289, 98);
        skutecna[3] = new Point(0, 92);
        cilova[0] = new Point(0, 0);
        cilova[1] = new Point(289, 0);
        cilova[2] = new Point(289, 94);
        cilova[3] = new Point(0, 94);
        MatOfPoint2f orig = new MatOfPoint2f(skutecna);
        // vypocitame matici transformace
        transformace = Imgproc.getPerspectiveTransform(orig, new MatOfPoint2f(cilova));
        System.out.println("Transformace>\n" + transformace.dump());
        transformuj(transformace, false); // a provedeme
        // jeste zvetseni:
        Mat transformation = new Mat(2, 3, CvType.CV_32FC1, new Scalar(0));
        transformation.put(0, 0, 1.062);
        transformation.put(1, 1, 1.1);
//        transformation.put(2, 2, 1);
        jButton_toolBar_outputAsInputActionPerformed(null);
        transformuj(transformation, true); // a provedeme

    }//GEN-LAST:event_jButton_transformace_vyrovnejActionPerformed

    private void jButton_transformace_orizniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_transformace_orizniActionPerformed
        try {

            outputMat = new Mat(inputMat, new Rect(130, 285, 340, 140));
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_transformace_orizniActionPerformed

    private void jButton_porovnani_vyberVzorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_porovnani_vyberVzorActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Obrazky", "jpg", "bmp", "jpeg", "tif", "tiff", "png");
        fc.addChoosableFileFilter(filter);
        fc.setFileFilter(filter);
        fc.setDialogTitle("Vyberte soubor s obrazkem vzoru");
        try {
            if (currentDir == null) {
                currentDir = new File((new File(".").getCanonicalPath()));
                System.out.println("Adresar " + currentDir.getAbsolutePath());
            }
            fc.setCurrentDirectory(currentDir);
        } catch (IOException iOException) {
        }
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                currentDir = file.getParentFile();
                templateMat = Imgcodecs.imread(file.getAbsolutePath());
//                HighGui.destroyWindow(TEMPLATE_WIN_NAME);
                HighGui.imshow(TEMPLATE_WIN_NAME, templateMat);
                HighGui.waitKey(1);
                jLabel_info.setText(">Zvolen soubor ablony " + file.getAbsolutePath());
            } catch (Exception e) {
                jLabel_info.setText(">Chyba pøi volbì ablony: " + e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_jButton_porovnani_vyberVzorActionPerformed

    private void jButton_porovnani_porovnejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_porovnani_porovnejActionPerformed
        try {
            Mat result = new Mat();
            Mat img_display = new Mat();
            int match_method = Imgproc.TM_CCORR;
            if (jRadioButton_porovnani_SQDIFF.isSelected()) {
                match_method = Imgproc.TM_SQDIFF;
            } else if (jRadioButton_porovnani_SQDIFFNorm.isSelected()) {
                match_method = Imgproc.TM_SQDIFF_NORMED;
            } else if (jRadioButton_porovnani_CCOEFF.isSelected()) {
                match_method = Imgproc.TM_CCOEFF;
            } else if (jRadioButton_porovnani_CCOEFFNorm.isSelected()) {
                match_method = Imgproc.TM_CCOEFF_NORMED;
            } else if (jRadioButton_porovnani_CCOR.isSelected()) {
                match_method = Imgproc.TM_CCORR;
            } else if (jRadioButton_porovnani_CCORNorm.isSelected()) {
                match_method = Imgproc.TM_CCORR_NORMED;
            } else {
                jRadioButton_porovnani_CCOR.setSelected(true);
            }
            inputMat.copyTo(img_display);
            int result_cols = inputMat.cols() - templateMat.cols() + 1;
            int result_rows = inputMat.rows() - templateMat.rows() + 1;
            result.create(result_rows, result_cols, CvType.CV_32FC1);
//        Boolean method_accepts_mask = (Imgproc.TM_SQDIFF == match_method || match_method == Imgproc.TM_CCORR_NORMED);
//        if (use_mask && method_accepts_mask) {
//            Imgproc.matchTemplate(inputMat, templateMat, result, match_method, mask);
//        } else {
            Imgproc.matchTemplate(inputMat, templateMat, result, match_method);
//        }
            Core.normalize(result, result, 0, 1, Core.NORM_MINMAX, -1, new Mat());
            Point matchLoc;
            Core.MinMaxLocResult mmr = Core.minMaxLoc(result);
            if (match_method == Imgproc.TM_SQDIFF || match_method == Imgproc.TM_SQDIFF_NORMED) {
                matchLoc = mmr.minLoc;
            } else {
                matchLoc = mmr.maxLoc;
            }
            Imgproc.rectangle(img_display, matchLoc, new Point(matchLoc.x + templateMat.cols(), matchLoc.y + templateMat.rows()),
                    new Scalar(255, 0, 0), 2, 8, 0);
////        Imgproc.rectangle(result, matchLoc, new Point(matchLoc.x + templateMat.cols(), matchLoc.y + templateMat.rows()),
////                new Scalar(0, 0, 0), 2, 8, 0);
//        Image tmpImg = HighGui.toBufferedImage(img_display);
//        ImageIcon icon = new ImageIcon(tmpImg);
//        imgDisplay.setIcon(icon);
//        result.convertTo(result, CvType.CV_8UC1, 255.0);
//        tmpImg = HighGui.toBufferedImage(result);
//                HighGui.destroyWindow("vysledek");
            HighGui.imshow(TEMPLATE_VYSTUP, img_display);
            HighGui.waitKey(1);
            System.out.println("MATCHLOC: " + matchLoc.toString());
            double[] res = result.get((int) matchLoc.y, (int) matchLoc.x);
            jLabel_info.setText(">" + res[0]);
            System.out.println("Matice vysledku:\n" + result.dump());
        } catch (Exception e) {
            jLabel_info.setText(">" + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_porovnani_porovnejActionPerformed

    private void jButton_toolbar_toColourSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolbar_toColourSchemeActionPerformed
        try {
            outputMat = inputMat.clone();
            Mat newOutputMat = new Mat(outputMat.width(), outputMat.height(), CvType.CV_8U);
            Imgproc.cvtColor(outputMat, newOutputMat, Imgproc.COLOR_GRAY2RGB);
            outputMat = newOutputMat;
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText(">" + e.getLocalizedMessage());
        }
        pack();
    }//GEN-LAST:event_jButton_toolbar_toColourSchemeActionPerformed

    private void jButton_porovnani_porovnejHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_porovnani_porovnejHistogramActionPerformed
        try {
            List<Mat> list = new ArrayList<>();
            list.add(inputMat);
            List<Mat> list2 = new ArrayList<>();
            list2.add(templateMat);
            int histSize = 256;
            float[] range = {0, 256};
            MatOfFloat histRange = new MatOfFloat(range);
            Mat calcHist = new Mat();
            Mat calc2Hist = new Mat();
            Imgproc.calcHist(list, new MatOfInt(0), new Mat(), calcHist, new MatOfInt(histSize), histRange, false);
            Imgproc.calcHist(list2, new MatOfInt(0), new Mat(), calc2Hist, new MatOfInt(histSize), histRange, false);

            double result = Imgproc.compareHist(calcHist, calc2Hist, Imgproc.CV_COMP_CORREL);
            jLabel_info.setText("> Výsledek porovnání histogramù: " + result);
        } catch (Exception e) {
            jLabel_info.setText(">Chyba porovnání histogramù: " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_porovnani_porovnejHistogramActionPerformed

    private void jButton_porovnani_ukazRozdilyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_porovnani_ukazRozdilyActionPerformed
        Mat sub = new Mat();
        try {
            Core.subtract(inputMat, templateMat, sub);
            HighGui.imshow("Výsledek porovnání", sub);
            HighGui.waitKey(1);
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_porovnani_ukazRozdilyActionPerformed

    private void jRadioButton_toolbar_prahovani_binaryInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolbar_prahovani_binaryInvActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolbar_prahovani_binaryInvActionPerformed

    private void jRadioButton_toolbar_prahovani_tozeroInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolbar_prahovani_tozeroInvActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolbar_prahovani_tozeroInvActionPerformed

    private void jRadioButton_toolbar_prahovani_truncateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolbar_prahovani_truncateActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolbar_prahovani_truncateActionPerformed

    private void jRadioButton_toolbar_prahovani_triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_toolbar_prahovani_triangleActionPerformed
        prahujAction();
    }//GEN-LAST:event_jRadioButton_toolbar_prahovani_triangleActionPerformed

    private void jButton_hrany_SobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hrany_SobelActionPerformed
        try {
            int dx = jCheckBox_hrany_sobel_horizontalne.isSelected() ? 1 : 0;
            int dy = jCheckBox_hrany_sobel_vertikalne.isSelected() ? 1 : 0;
            if (jCheckBox_hrany_sobel_horizontalne.isSelected() || jCheckBox_hrany_sobel_vertikalne.isSelected()) {
                if (jCheckBox_hrany_sobel_horizontalne.isSelected() && jCheckBox_hrany_sobel_vertikalne.isSelected()) {
                    Mat sobelX = new Mat();
                    Mat sobelY = new Mat();
                    Imgproc.Sobel(inputMat, sobelX, CvType.CV_8U, 1, 0);
                    Imgproc.Sobel(inputMat, sobelY, CvType.CV_8U, 0, 1);
                    Core.addWeighted(sobelX, 1, sobelY, 1, 0, outputMat);
                } else if (jCheckBox_hrany_sobel_horizontalne.isSelected()) {
                    Imgproc.Sobel(inputMat, outputMat, CvType.CV_8U, 1, 0);
                } else {
                    Imgproc.Sobel(inputMat, outputMat, CvType.CV_8U, 0, 1);
                }

                outputImage = MatToBufferedImage(outputMat);
                ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
                repaint();
            }
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_hrany_SobelActionPerformed

    private void jButton_hrany_laplacianGaussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hrany_laplacianGaussianActionPerformed
        try {
            Mat vstup = inputMat.clone();
            if (jCheckBox_hrany_laplacianGaussian_Gaussian.isSelected()) {
                int gx = (int) jSpinner_hrany_laplacianGaussian_gaussX.getValue();
                int gy = (int) jSpinner_hrany_laplacianGaussian_gaussY.getValue();
                double sigma = Double.parseDouble(jTextField_hrany_laplacianGaussian_sigma.getText());
                Imgproc.GaussianBlur(inputMat, outputMat, new Size(gx, gy), sigma);
                vstup = outputMat.clone();
            }
            if (jCheckBox_hrany_laplacianGaussian_laplacian.isSelected()) {
                int hl = (int) jSpinner_hrany_laplacianGaussian_laplacianHloubka.getValue();
                Imgproc.Laplacian(vstup, outputMat, CvType.CV_8U, hl);
            }
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }

    }//GEN-LAST:event_jButton_hrany_laplacianGaussianActionPerformed

    private void jButton_hrany_cannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hrany_cannyActionPerformed
        cannyEdgeFilter();
    }//GEN-LAST:event_jButton_hrany_cannyActionPerformed

    private void jSlider_hrany_canny_dolniMezStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_hrany_canny_dolniMezStateChanged
        cannyEdgeFilter();
    }//GEN-LAST:event_jSlider_hrany_canny_dolniMezStateChanged

    private void jSlider_hrany_canny_horniMezStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_hrany_canny_horniMezStateChanged
        cannyEdgeFilter();
    }//GEN-LAST:event_jSlider_hrany_canny_horniMezStateChanged

    private void jButton_hrany_laplacianGaussian_zostreniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hrany_laplacianGaussian_zostreniActionPerformed
        try {
            int hl = (int) jSpinner_hrany_laplacianGaussian_laplacianHloubka.getValue();
            Mat convMat = new Mat();
            Mat laplacMat = new Mat();
            inputMat.convertTo(convMat, CvType.CV_32F);
            Imgproc.Laplacian(convMat, laplacMat, CvType.CV_32F, hl);
            Mat sharpIm = new Mat(convMat.rows(), convMat.cols(), convMat.type());
            Core.addWeighted(convMat, 1, laplacMat, -0.3, 0, sharpIm);
            sharpIm.convertTo(outputMat, CvType.CV_8U);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_hrany_laplacianGaussian_zostreniActionPerformed

    private void jButton_hrany_hough_houghLinesPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hrany_hough_houghLinesPActionPerformed
        try {
            Mat lines = new Mat();
            int maxGap = (int)jSpinner_hrany_hough_maxGap.getValue();
            int minLen = (int)jSpinner_hrany_hough_minLen.getValue();
            int threshold = (int)jSpinner_hrany_hough_prah.getValue();
            Imgproc.HoughLinesP(inputMat, lines, 1, Math.PI / 200, threshold, minLen, maxGap);
            outputMat = new Mat(inputMat.width(), inputMat.height(), CvType.CV_8U);
            Imgproc.cvtColor(inputMat, outputMat, Imgproc.COLOR_GRAY2RGB);
            for (int x = 0; x < lines.rows(); x++) {
                double[] l = lines.get(x, 0);
                Imgproc.line(outputMat, new Point(l[0], l[1]), new Point(l[2], l[3]), new Scalar((x % 2) * 255, ((x % 3) * 127), ((x + 1) % 2) * 255), 3, Imgproc.LINE_AA, 0);
            }
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText("> Poèet èar: " + lines.rows());
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_hrany_hough_houghLinesPActionPerformed

    private void jButton_toolbar_zoomMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolbar_zoomMinusActionPerformed
        try {
            Imgproc.pyrDown(inputMat, inputMat, new Size(((double) inputMat.cols()) / 2, ((double) inputMat.rows()) / 2));
            Imgproc.pyrDown(outputMat, outputMat, new Size(((double) outputMat.cols()) / 2, ((double) outputMat.rows()) / 2));

            outputImage = MatToBufferedImage(outputMat);
            inputImage = MatToBufferedImage(inputMat);

            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            ((JPanel_DoubleImage) jPanelObrazky).setImageLeft(inputImage);
            repaint();
            pack();
            jLabel_info.setText("> ");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_toolbar_zoomMinusActionPerformed

    private void jButton_toolbar_zoomPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolbar_zoomPlusActionPerformed
        try {
            Imgproc.pyrUp(inputMat, inputMat, new Size(((double) inputMat.cols()) * 2, ((double) inputMat.rows()) * 2));
            Imgproc.pyrUp(outputMat, outputMat, new Size(((double) outputMat.cols()) * 2, ((double) outputMat.rows()) * 2));

            outputImage = MatToBufferedImage(outputMat);
            inputImage = MatToBufferedImage(inputMat);

            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            ((JPanel_DoubleImage) jPanelObrazky).setImageLeft(inputImage);
            repaint();
            pack();
            jLabel_info.setText("> ");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_toolbar_zoomPlusActionPerformed

    private void jButton_toolbar_prahovani_ekvalizeHistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_toolbar_prahovani_ekvalizeHistActionPerformed
        try {
            Imgproc.equalizeHist(inputMat, outputMat);
            outputImage = MatToBufferedImage(outputMat);

            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            pack();
            jLabel_info.setText("> ");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_toolbar_prahovani_ekvalizeHistActionPerformed

    private void jButton_rohy_harris_cornerHarrisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_rohy_harris_cornerHarrisActionPerformed
        try {
            int blockSize = (int) jSpinner_rohy_harris_blockSize.getValue();
            int apertureSizeSobel = (int) jSpinner_rohy_harris_vyrez.getValue();
            double k = 0.04;
            int threshold = jSlider_rohy_harris_threshold.getValue();
            Mat corn = Mat.zeros(inputMat.size(), CvType.CV_32FC1);
            Mat preMat = new Mat();
            Mat prevM = new Mat();

            Imgproc.cornerHarris(inputMat, corn, blockSize, apertureSizeSobel, k);

            Core.normalize(corn, preMat, 0, 255, Core.NORM_MINMAX);
            Core.convertScaleAbs(preMat, outputMat);
            inputMat.convertTo(prevM, CvType.CV_8UC3);
            Imgproc.cvtColor(prevM, outputMat, Imgproc.COLOR_GRAY2RGB);
            float[] dstNormData = new float[(int) (preMat.total() * preMat.channels())];
            preMat.get(0, 0, dstNormData);
            for (int i = 0; i < preMat.rows(); i++) {
                for (int j = 0; j < preMat.cols(); j++) {
                    if ((int) dstNormData[i * preMat.cols() + j] > threshold) {
                        Imgproc.circle(outputMat, new Point(j, i), 5, new Scalar(0, 0, 255), 2, 8, 0);
                    }
                }
            }
            //corn.convertTo(outputMat, CvType.CV_8U);

            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            pack();
            jLabel_info.setText("> ");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_rohy_harris_cornerHarrisActionPerformed

    private void jSlider_rohy_harris_thresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_rohy_harris_thresholdStateChanged
        jButton_rohy_harris_cornerHarrisActionPerformed(null);
    }//GEN-LAST:event_jSlider_rohy_harris_thresholdStateChanged

    private void jButton_rohy_shiTomasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_rohy_shiTomasiActionPerformed
        makeShiTomasi();
    }//GEN-LAST:event_jButton_rohy_shiTomasiActionPerformed

    private void jSlider_rohy_shiTomasi_maxCornerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_rohy_shiTomasi_maxCornerStateChanged
        makeShiTomasi();
    }//GEN-LAST:event_jSlider_rohy_shiTomasi_maxCornerStateChanged

    private void jButton_kontrolaSegmentu_orez_provedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_kontrolaSegmentu_orez_provedActionPerformed
        try {
            double rozliseniX = 413;
            double rozliseniY = 126;
            if (jComboBox_kontrolaSegmentu_orez_rozliseni.getSelectedIndex() == 1) {
                rozliseniX = 827;
                rozliseniY = 252;
            }
            Point[] skutecna = new Point[4];
            Point[] cilova = new Point[4];
            skutecna[0] = new Point((int) jSpinner_kontrolaSegmentu_orez_roh1x.getValue(), (int) jSpinner_kontrolaSegmentu_orez_roh1y.getValue());
            skutecna[1] = new Point((int) jSpinner_kontrolaSegmentu_orez_roh2x.getValue(), (int) jSpinner_kontrolaSegmentu_orez_roh2y.getValue());
            skutecna[2] = new Point((int) jSpinner_kontrolaSegmentu_orez_roh3x.getValue(), (int) jSpinner_kontrolaSegmentu_orez_roh3y.getValue());
            skutecna[3] = new Point((int) jSpinner_kontrolaSegmentu_orez_roh4x.getValue(), (int) jSpinner_kontrolaSegmentu_orez_roh4y.getValue());
            cilova[0] = skutecna[0];
            cilova[1] = new Point(skutecna[0].x + rozliseniX, skutecna[0].y);
            cilova[2] = new Point(skutecna[0].x, skutecna[0].y + rozliseniY);
            cilova[3] = new Point(skutecna[0].x + rozliseniX, skutecna[0].y + rozliseniY);

            outputMat = SegmentsControl.perspectiveMatAndCut(inputMat, skutecna, cilova);

            repaintOutputMat();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_kontrolaSegmentu_orez_provedActionPerformed

    private void jButton_kontrolaSegmentu_maskujActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_kontrolaSegmentu_maskujActionPerformed
        try {
            Mat maskMat = SegmentsControl.changeMatSize(maskFile, inputMat);
            if (jCheckBox_kontrolaSegmentu_invertujMasku.isSelected()) {
                // invertujeme masku
                Core.bitwise_not(maskMat, maskMat);
            }
            outputMat = SegmentsControl.pictureMask(inputMat, maskMat);
            repaintOutputMat();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_kontrolaSegmentu_maskujActionPerformed

    private void jButton_kontrolaSegmentu_souborMaskyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_kontrolaSegmentu_souborMaskyActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Obrazky", "jpg", "bmp", "jpeg", "tif", "tiff", "png");
        fc.addChoosableFileFilter(filter);
        fc.setFileFilter(filter);
        fc.setDialogTitle("Vyberte soubor s obrazkem vzoru maskovani");
        try {
            if (currentDir == null) {
                currentDir = new File((new File(".").getCanonicalPath()));
                System.out.println("Adresar " + currentDir.getAbsolutePath());
            }
            fc.setCurrentDirectory(currentDir);
        } catch (IOException iOException) {
        }
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            outputMat = Imgcodecs.imread(file.getPath());
            maskFile = outputMat;
            repaintOutputMat();
            jLabel_info.setText(">");
            pack();
        }
    }//GEN-LAST:event_jButton_kontrolaSegmentu_souborMaskyActionPerformed

    private void jButton_kontrolaSegmentu_toBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_kontrolaSegmentu_toBinaryActionPerformed
        try {
            Mat maskMat = SegmentsControl.changeMatSize(maskFile, inputMat);
            if (jCheckBox_kontrolaSegmentu_invertujMasku.isSelected()) {
                // invertujeme masku
                Core.bitwise_not(maskMat, maskMat);
            }
            outputMat = SegmentsControl.displayToBinaryView(inputMat, maskMat);
            repaintOutputMat();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_kontrolaSegmentu_toBinaryActionPerformed

    private void jButton_kontrolaSegmentu_vyhodnoceni_segmentovySouborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_kontrolaSegmentu_vyhodnoceni_segmentovySouborActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Obrazky", "jpg", "bmp", "jpeg", "tif", "tiff", "png");
        fc.addChoosableFileFilter(filter);
        fc.setFileFilter(filter);
        fc.setDialogTitle("Vyberte soubor s prislusnym segmentem");
        try {
            File dir = new File("segments");
            //    currentDir = new File((new File(".").getCanonicalPath()));
            System.out.println("Adresar " + dir.getAbsolutePath());

            fc.setCurrentDirectory(dir);
        } catch (Exception xception) {
            System.err.println("Err: +" + xception.getLocalizedMessage());
        }
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            outputMat = SegmentsControl.changeMatSize(Imgcodecs.imread(file.getPath()), inputMat);
            Core.bitwise_not(outputMat, outputMat);
            segmentMaskMat = outputMat;
            repaintOutputMat();
            jLabel_info.setText(">");
            pack();
        }
    }//GEN-LAST:event_jButton_kontrolaSegmentu_vyhodnoceni_segmentovySouborActionPerformed

    private void jButton_kontrolaSegmentu_vyhodnoceni_vycisliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_kontrolaSegmentu_vyhodnoceni_vycisliActionPerformed
        try {
            outputMat = SegmentsControl.pictureMask(inputMat, segmentMaskMat);
            repaintOutputMat();
            Mat testMatOut = new Mat(outputMat.width(), outputMat.height(), CvType.CV_8UC1);
            Imgproc.cvtColor(outputMat, testMatOut, Imgproc.COLOR_RGB2GRAY);
            Mat testMatSegment = new Mat(segmentMaskMat.width(), segmentMaskMat.height(), CvType.CV_8UC1);
            Imgproc.cvtColor(segmentMaskMat, testMatSegment, Imgproc.COLOR_RGB2GRAY);

            double sumViewed = Core.countNonZero(testMatOut);
            double sumSegmentMask = Core.countNonZero(testMatSegment);
            double inPer = sumViewed * 100 / sumSegmentMask;
            jLabel_info.setText("> Vyhodnoceno " + sumViewed + "/" + sumSegmentMask + " tj. " + String.format("%1.2f", inPer) + "%");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_kontrolaSegmentu_vyhodnoceni_vycisliActionPerformed

    private void jButton_analyzaBarev_prevzorkujBarvyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_analyzaBarev_prevzorkujBarvyActionPerformed
        try {
            int vyska = inputMat.height();
            int sirka = inputMat.width();
            double[] color;
            int bi;
            int modulo = jSlider_analyzaBarev_prevzorkuj.getValue();
            int pul = modulo / 2;
            color = inputMat.get(0, 0);
            outputMat = inputMat.clone();

            int pocetBarev = color.length;
            for (int y = 0; y < vyska; y++) {
                for (int x = 0; x < sirka; x++) {

                    color = inputMat.get(y, x);
                    for (bi = 0; bi < pocetBarev; bi++) {

                        color[bi] = color[bi] + pul - color[bi] % modulo;
                    }
                    outputMat.put(y, x, color);
                }
            }
            repaintOutputMat();
            jLabel_info.setText(">");
            pack();

        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_analyzaBarev_prevzorkujBarvyActionPerformed

    private void jSlider_analyzaBarev_prevzorkujStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider_analyzaBarev_prevzorkujStateChanged
        jButton_analyzaBarev_prevzorkujBarvyActionPerformed(null);
    }//GEN-LAST:event_jSlider_analyzaBarev_prevzorkujStateChanged

    private void jButton_analyzaBarev_nejBarvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_analyzaBarev_nejBarvaActionPerformed
        try {
            int vyska = inputMat.height();
            int sirka = inputMat.width();
            double[] color;
            int bi;
            int modulo = jSlider_analyzaBarev_prevzorkuj.getValue();
            int pul = modulo / 2;
            color = inputMat.get(0, 0);
            outputMat = inputMat.clone();
            int pocetBarev = color.length;
            if (pocetBarev == 3) {
                for (int y = 0; y < vyska; y++) {
                    for (int x = 0; x < sirka; x++) {

                        color = inputMat.get(y, x);
                        if (color[0] > color[1]) {
                            color[1] = 0;
                            if (color[2] > color[0]) {
                                color[0] = 0;
                                color[2] = 255;
                            } else {
                                color[2] = 0;
                                color[0] = 255;
                            }
                        } else {
                            color[0] = 0;
                            if (color[2] > color[1]) {
                                color[1] = 0;
                                color[2] = 255;
                            } else {
                                color[2] = 0;
                                color[1] = 255;
                            }
                        }
                        outputMat.put(y, x, color);
                    }
                }
                repaintOutputMat();
                jLabel_info.setText(">");
                pack();
            } else {
                jLabel_info.setText("> Pouze pro tøíbarevný vstupní obraz!");
            }
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_analyzaBarev_nejBarvaActionPerformed

    private void jButton_analyzaBarev_viewRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_analyzaBarev_viewRActionPerformed
        try {
            view1Canal(2);
            repaintOutputMat();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_analyzaBarev_viewRActionPerformed

    private void jButton_analyzaBarev_viewGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_analyzaBarev_viewGActionPerformed
        try {
            view1Canal(1);
            repaintOutputMat();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_analyzaBarev_viewGActionPerformed

    private void jButton_analyzaBarev_viewBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_analyzaBarev_viewBActionPerformed
        try {
            view1Canal(0);
            repaintOutputMat();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_analyzaBarev_viewBActionPerformed

    private void jButton_analyzabarev_nej2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_analyzabarev_nej2ActionPerformed
        try {
            int vyska = inputMat.height();
            int sirka = inputMat.width();
            double[] color;
            int[] poradi = new int[3];
            color = inputMat.get(0, 0);
            outputMat = inputMat.clone();
            int pocetBarev = color.length;
            if (pocetBarev == 3) {
                for (int y = 0; y < vyska; y++) {
                    for (int x = 0; x < sirka; x++) {

                        color = inputMat.get(y, x);
                        if (color[0] > color[1]) {
                            poradi[0] = 1;
                            poradi[1] = 0;
                        } else {
                            poradi[0] = 0;
                            poradi[1] = 1;
                        }
                        if (color[2] > color[poradi[1]]) {
                            poradi[2] = 2;
                        } else {
                            poradi[2] = poradi[1];
                            poradi[1] = 2;
                        }
                        color[poradi[0]] = 0;
                        if (color[poradi[1]] > 100) {
                            color[poradi[1]] = 128;
                        } else {
                            color[poradi[1]] = 0;
                        }
                        color[poradi[2]] = 255;
                        outputMat.put(y, x, color);
                    }
                }
                repaintOutputMat();
                jLabel_info.setText(">");
                pack();
            } else {
                jLabel_info.setText("> Pouze pro tøíbarevný vstupní obraz!");
            }
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_analyzabarev_nej2ActionPerformed

    private void jSpinner_hrany_hough_prahStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_hrany_hough_prahStateChanged
        jButton_hrany_hough_houghLinesPActionPerformed(null);
    }//GEN-LAST:event_jSpinner_hrany_hough_prahStateChanged

    private void jSpinner_hrany_hough_minLenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_hrany_hough_minLenStateChanged
        jButton_hrany_hough_houghLinesPActionPerformed(null);
    }//GEN-LAST:event_jSpinner_hrany_hough_minLenStateChanged

    private void jSpinner_hrany_hough_maxGapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_hrany_hough_maxGapStateChanged
        jButton_hrany_hough_houghLinesPActionPerformed(null);
    }//GEN-LAST:event_jSpinner_hrany_hough_maxGapStateChanged

    private void jButton_hrany_extractContoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_hrany_extractContoursActionPerformed
        try {
            Mat hierarchy = new Mat();
            Mat maska;
            List<MatOfPoint> contours = new ArrayList<>();
            Imgproc.findContours(inputMat, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_NONE);
            outputMat = Mat.zeros(inputMat.size(), CvType.CV_8UC3);
//            for (int i = 0; i < contours.size(); i++) {
//                Scalar color = new Scalar(50, 0, 255);
//                Imgproc.drawContours(outputMat, contours, i, color, 2, Imgproc.LINE_8, hierarchy, 0, new Point());
//            }
            
            maska = Mat.zeros(inputMat.size(), CvType.CV_8UC3);

//            Imgproc.drawContours(maska, contours,-1, new Scalar(255), Imgproc.FILLED);

//            // vypln vseho spojeneho
//            for (int contourIdx = 0; contourIdx < contours.size(); contourIdx++) {
//                Imgproc.drawContours(maska, contours, contourIdx, new Scalar(0, 0, 255), Imgproc.FILLED);
//            }
            
            double maxArea = 0;
            int iMaxContour = 0;
            for (int ci=0; ci<contours.size(); ci++) {
                MatOfPoint contour = contours.get(ci);
                double contourArea = Imgproc.contourArea(contour);
//                Rect boundingBox = Imgproc.boundingRect(contour);
//                double aspectRatio = (double) boundingBox.width / boundingBox.height;
//                double extent = contourArea / (boundingBox.width * boundingBox.height);
//                if (contourArea > maxArea && contourArea > 200 && aspectRatio > this.aspectMin && aspectRatio < this.aspectMax && extent > this.extentMin && extent < this.extentMax) {
                if (contourArea > maxArea) {
                    maxArea = contourArea;
                    iMaxContour = ci;
                }
            }
            Imgproc.drawContours(maska, contours, iMaxContour, new Scalar(0, 0, 255), Imgproc.FILLED);
//            System.out.println("nalezeno>\n"+contours.get(iMaxContour).dump());

            MatOfPoint contour = null;
            Scalar color = null;
                Random rnd = new Random();
                color = new Scalar(255, 255, 0);
                contour = contours.get(iMaxContour);
            if (!jCheckBox_hrany_obrysy_pravouhle.isSelected()) {
                List<MatOfPoint> hullList = new ArrayList<>();
//        for (MatOfPoint contour : contours) {
                MatOfInt hull = new MatOfInt();
                Imgproc.convexHull(contour, hull);
                Point[] contourArray = contour.toArray();
                Point[] hullPoints = new Point[hull.rows()];
                List<Integer> hullContourIdxList = hull.toList();
                double dx, dy;
                for (int i = 0; i < hullContourIdxList.size(); i++) {
                    hullPoints[i] = contourArray[hullContourIdxList.get(i)];
                    System.out.print("Bod "+i+" : "+hullPoints[i].toString());
                    if(i>0) {
                        dx = hullPoints[i].x-hullPoints[i-1].x;
                        dy = hullPoints[i].y-hullPoints[i-1].y;
                        System.out.print("  Rozdil: "+dx+","+dy);
                    }
                    System.out.println();
                }
                hullList.add(new MatOfPoint(hullPoints));
                hullList.add(new MatOfPoint(SegmentsControl.quadrilateralHull(hullPoints, 5)));
//                System.out.println(hullList.get(0).dump());
                color = new Scalar(255, 0, 0);
                //Mat drawing = Mat.zeros(cannyOutput.size(), CvType.CV_8UC3);
                Imgproc.drawContours(maska, hullList, 0, color);
             
                Imgproc.drawContours(maska, hullList, 1, new Scalar(0, 255,  0));
//                System.out.println(hullList.get(1).dump());
            } else {
            Point[] rectPoints = new Point[4];
            RotatedRect minRect = Imgproc.minAreaRect(new MatOfPoint2f(contour.toArray()));
            minRect.points(rectPoints);
            for (int j = 0; j < 4; j++) {
                Imgproc.line(maska, rectPoints[j], rectPoints[(j+1) % 4], color);
            }

            }

            outputMat = maska;
            
            repaintOutputMat();
            jLabel_info.setText(">");
            pack();
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButton_hrany_extractContoursActionPerformed

    private void view1Canal(int canalNum) {
        int vyska = inputMat.height();
        int sirka = inputMat.width();
        double[] color;
        int bi;
        color = inputMat.get(0, 0);
        outputMat = inputMat.clone();

        int pocetBarev = color.length;
        for (int y = 0; y < vyska; y++) {
            for (int x = 0; x < sirka; x++) {

                color = inputMat.get(y, x);
                for (bi = 0; bi < pocetBarev; bi++) {
                    if (bi != canalNum) {
                        color[bi] = 0;
                    }
                }
                outputMat.put(y, x, color);
            }
        }
    }

    private void repaintOutputMat() {
        outputImage = MatToBufferedImage(outputMat);
        ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
        repaint();
    }

    private void cannyEdgeFilter() {
        try {
            double treshLo = jSlider_hrany_canny_dolniMez.getValue();
            double treshHi = jSlider_hrany_canny_horniMez.getValue();
            Imgproc.Canny(inputMat, outputMat, treshLo, treshHi);
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }

    private void transformuj(Mat transformation, boolean isAffine) {
        try {
//            System.out.println("Matice transformace>\n" + transformation.dump());
            if (isAffine) {
                Imgproc.warpAffine(inputMat, outputMat, transformation, inputMat.size());
            } else {
                Imgproc.warpPerspective(inputMat, outputMat, transformation, inputMat.size());

            }

            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }

    /**
     * Zjisti, zda dany bod s toleranci obsahuje vstupni matice
     *
     * @param mat
     * @param point
     * @param tolerance
     * @return
     */
    private boolean isPointInside(Mat mat, Point point, int tolerance) {
        double sx = (point.x - tolerance) < 0 ? 0 : (point.x - tolerance);
        double sy = (point.y - tolerance) < 0 ? 0 : (point.y - tolerance);
        // plusove hodnoty neresim - mohou byt vetsi
//        System.out.println("MatXXX "+mat.width()+" x "+mat.height());
        for (int i = 0; i < mat.height(); i++) {
            double p[] = mat.get(i, 0);
            // overeni, zda obsahuje bod spolecne s toleranci
            for (double x = sx; x <= (point.x + tolerance); x++) {
                for (double y = sy; y <= (point.y + tolerance); y++) {
                    if ((x == p[0]) && (y == p[1])) {
                        return (true);   // nalezli jsme shodu
                    }
                }
            }
//            System.out.println("X = "+p[0]+" Y = "+p[1]);

        }
//        Mat child = mat.submat(0, 3, 0, 1);
//        System.out.println("MatCHILD "+child.dump());

        return (false);
    }

    private void hledejObjektyAction() {
        try {
            Random rng = new Random();
            Mat cannyMat = new Mat();
            Mat hierarchy = new Mat();

            Imgproc.Canny(inputMat, cannyMat, jSlider_morfologie_findThreshold.getValue(), jSlider_morfologie_findThreshold.getValue() * 2);
            List<MatOfPoint> contours = new ArrayList<>();
            Imgproc.findContours(cannyMat, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_NONE);
            outputMat = Mat.zeros(cannyMat.size(), CvType.CV_8UC3);
            for (int i = 0; i < contours.size(); i++) {
                Scalar color = new Scalar(rng.nextInt(256), rng.nextInt(256), rng.nextInt(256));
                Imgproc.drawContours(outputMat, contours, i, color, 2, Imgproc.LINE_8, hierarchy, 0, new Point());
            }

            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText("> Pocet objektu: " + contours.size());
        } catch (Exception e) {
            jLabel_info.setText("> " + e.getLocalizedMessage());
        }
    }

    private VideoCapture initGrabber(int ID) {
        VideoCapture grabber = new VideoCapture(ID);
        if ((grabber == null) || (!grabber.isOpened())) {
            System.out.println("Chyba pripojeni k webcam: " + ID);
            grabber = null;
        } else {
            System.out.println("Pripojen k webcam: " + ID);
            grabber.set(Videoio.CAP_PROP_FRAME_WIDTH, CAMERAWIDTH);
            grabber.set(Videoio.CAP_PROP_FRAME_HEIGHT, CAMERAHEIGHT);
        }

        return grabber;
    }  // end of initGrabber()

    private void prahujAction() throws NumberFormatException {
//        System.out.println("Slider = "+jSlider_toolBar_prahovani_mez.getValue()+ " Prahovani = "+Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()));
        try {
            int rozdeleniX = (int) jSpinner_toolbar_prahovani_rozdeleniX.getValue();
            int rozdeleniY = (int) jSpinner_toolbar_prahovani_rozdeleniY.getValue();
            int xStart, xEnd, yStart, yEnd;
            int krokX = inputMat.width() / rozdeleniX + ((inputMat.width() % rozdeleniX) == 0 ? 0 : 1);
            int krokY = inputMat.height() / rozdeleniY + ((inputMat.height() % rozdeleniY) == 0 ? 0 : 1);
            Mat inMat, outMat, inXMat, outXMat;
            outputMat = inputMat.clone();
            outMat = new Mat();

            for (int x = 0; x < rozdeleniX; x++) {
                xStart = x * krokX;
                xEnd = (x + 1) * krokX;
                if (xEnd > inputMat.width()) {
                    xEnd = inputMat.width();
                }
                for (int y = 0; y < rozdeleniY; y++) {
                    yStart = y * krokY;
                    yEnd = (y + 1) * krokY;
                    if (yEnd > inputMat.height()) {
                        yEnd = inputMat.height();
                    }
                    inMat = inputMat.submat(yStart, yEnd, xStart, xEnd);
                    outMat = outputMat.submat(yStart, yEnd, xStart, xEnd);
                    if (jRadioButton_toolBar_prahovani_binary.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_BINARY);
                    } else if (jRadioButton_toolBar_prahovani_tozero.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_TOZERO);
                    } else if (jRadioButton_toolbar_prahovani_binaryInv.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_BINARY_INV);
                    } else if (jRadioButton_toolbar_prahovani_tozeroInv.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_TOZERO_INV);
                    } else if (jRadioButton_toolbar_prahovani_truncate.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_TRUNC);
                    } else if (jRadioButton_toolbar_prahovani_triangle.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_TRIANGLE);
                    } else if (jRadioButton_toolBar_prahovani_otsu.isSelected()) {
                        Imgproc.threshold(inMat, outMat, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_OTSU);
                    } else if (jRadioButton_toolBar_prahovani_adaptiveMeanC.isSelected()) {
                        Imgproc.adaptiveThreshold(inMat, outMat, 255, Imgproc.ADAPTIVE_THRESH_MEAN_C, Imgproc.THRESH_BINARY, jSlider_toolBar_prahovani_blockSize.getValue() / 2 * 2 + 1, Integer.parseInt(jTextField_toolBar_prahovani_offset.getText()));
                    } else if (jRadioButton_toolBar_prahovani_adaptivniGaussianC.isSelected()) {
                        Imgproc.adaptiveThreshold(inMat, outMat, 255, Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C, Imgproc.THRESH_BINARY, jSlider_toolBar_prahovani_blockSize.getValue() / 2 * 2 + 1, Integer.parseInt(jTextField_toolBar_prahovani_offset.getText()));
                    } else if (jRadioButton_toolBar_prahovani_band.isSelected()) {
                        Mat preObraz = outMat.clone();
                        Mat preObraz2 = outMat.clone();
                        Imgproc.threshold(inMat, preObraz2, jSlider_toolBar_prahovani_mez.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_BINARY);
                        Imgproc.threshold(inMat, preObraz, jSlider_toolBar_prahovani_bandPrah2.getValue(), Integer.parseInt(jTextField_toolBar_prahovani_maxVal.getText()), Imgproc.THRESH_BINARY_INV);
                        Core.bitwise_and(preObraz, preObraz2, outMat);
                    }
                }
            }
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            jLabel_info.setText(">");
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }

    private void outToGrayScale() {
        Mat newOutputMat = new Mat(outputMat.width(), outputMat.height(), CvType.CV_8UC1);
        Imgproc.cvtColor(outputMat, newOutputMat, Imgproc.COLOR_RGB2GRAY);
        outputMat = newOutputMat;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTester().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_porovnani;
    private javax.swing.ButtonGroup buttonGroup_prahovani;
    private javax.swing.JButton jButton_analyzaBarev_nejBarva;
    private javax.swing.JButton jButton_analyzaBarev_prevzorkujBarvy;
    private javax.swing.JButton jButton_analyzaBarev_viewB;
    private javax.swing.JButton jButton_analyzaBarev_viewG;
    private javax.swing.JButton jButton_analyzaBarev_viewR;
    private javax.swing.JButton jButton_analyzabarev_nej2;
    private javax.swing.JButton jButton_hrany_Sobel;
    private javax.swing.JButton jButton_hrany_canny;
    private javax.swing.JButton jButton_hrany_extractContours;
    private javax.swing.JButton jButton_hrany_hough_houghLinesP;
    private javax.swing.JButton jButton_hrany_laplacianGaussian;
    private javax.swing.JButton jButton_hrany_laplacianGaussian_zostreni;
    private javax.swing.JButton jButton_kontrolaSegmentu_maskuj;
    private javax.swing.JButton jButton_kontrolaSegmentu_orez_proved;
    private javax.swing.JButton jButton_kontrolaSegmentu_souborMasky;
    private javax.swing.JButton jButton_kontrolaSegmentu_toBinary;
    private javax.swing.JButton jButton_kontrolaSegmentu_vyhodnoceni_segmentovySoubor;
    private javax.swing.JButton jButton_kontrolaSegmentu_vyhodnoceni_vycisli;
    private javax.swing.JButton jButton_morfologie_findContours;
    private javax.swing.JButton jButton_morfologie_otevreni;
    private javax.swing.JButton jButton_morfologie_rozsireni;
    private javax.swing.JButton jButton_morfologie_vsechny;
    private javax.swing.JButton jButton_morfologie_zavreni;
    private javax.swing.JButton jButton_morfologie_zuzeni;
    private javax.swing.JButton jButton_porovnani_porovnej;
    private javax.swing.JButton jButton_porovnani_porovnejHistogram;
    private javax.swing.JButton jButton_porovnani_ukazRozdily;
    private javax.swing.JButton jButton_porovnani_vyberVzor;
    private javax.swing.JButton jButton_rohy_harris_cornerHarris;
    private javax.swing.JButton jButton_rohy_shiTomasi;
    private javax.swing.JButton jButton_toolBar_outputAsInput;
    private javax.swing.JButton jButton_toolBar_prahovani_prahovat;
    private javax.swing.JButton jButton_toolBar_toGrayScalled;
    private javax.swing.JButton jButton_toolBar_vyfotit;
    private javax.swing.JButton jButton_toolBar_zeSouboru;
    private javax.swing.JButton jButton_toolbar_invertColors;
    private javax.swing.JButton jButton_toolbar_prahovani_ekvalizeHist;
    private javax.swing.JButton jButton_toolbar_toColourScheme;
    private javax.swing.JButton jButton_toolbar_zoomMinus;
    private javax.swing.JButton jButton_toolbar_zoomPlus;
    private javax.swing.JButton jButton_transformace_meritko;
    private javax.swing.JButton jButton_transformace_orizni;
    private javax.swing.JButton jButton_transformace_otoceni;
    private javax.swing.JButton jButton_transformace_translace;
    private javax.swing.JButton jButton_transformace_vyrovnej;
    private javax.swing.JButton jButton_transformace_zkosit;
    private javax.swing.JCheckBox jCheckBox_hrany_laplacianGaussian_Gaussian;
    private javax.swing.JCheckBox jCheckBox_hrany_laplacianGaussian_laplacian;
    private javax.swing.JCheckBox jCheckBox_hrany_obrysy_pravouhle;
    private javax.swing.JCheckBox jCheckBox_hrany_sobel_horizontalne;
    private javax.swing.JCheckBox jCheckBox_hrany_sobel_vertikalne;
    private javax.swing.JCheckBox jCheckBox_kontrolaSegmentu_invertujMasku;
    private javax.swing.JComboBox<String> jComboBox_kontrolaSegmentu_orez_rozliseni;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel_hough_maxGap;
    private javax.swing.JLabel jLabel_hough_minDelka;
    private javax.swing.JLabel jLabel_hough_prah;
    private javax.swing.JLabel jLabel_hrany_laplacianGaussian_laplacianHloubka;
    private javax.swing.JLabel jLabel_hrany_laplacianGaussian_sigma;
    private javax.swing.JLabel jLabel_hrany_laplacianGaussian_x;
    private javax.swing.JLabel jLabel_info;
    private javax.swing.JLabel jLabel_kontrolaSegmentu_orez_roh1;
    private javax.swing.JLabel jLabel_kontrolaSegmentu_orez_roh2;
    private javax.swing.JLabel jLabel_kontrolaSegmentu_orez_roh3;
    private javax.swing.JLabel jLabel_kontrolaSegmentu_orez_roh4;
    private javax.swing.JLabel jLabel_meritkoX;
    private javax.swing.JLabel jLabel_meritkoY;
    private javax.swing.JLabel jLabel_morfologie_element_krat;
    private javax.swing.JLabel jLabel_rozdeleni_x;
    private javax.swing.JLabel jLabel_translaceX;
    private javax.swing.JLabel jLabel_translaceY;
    private javax.swing.JPanel jPanelObrazky;
    private javax.swing.JPanel jPanelToolBarBasic;
    private javax.swing.JPanel jPanel_Morfologie;
    private javax.swing.JPanel jPanel_analyzaBarev;
    private javax.swing.JPanel jPanel_analyzaBarev_prevzorkuj;
    private javax.swing.JPanel jPanel_hrany;
    private javax.swing.JPanel jPanel_hrany_canny;
    private javax.swing.JPanel jPanel_hrany_hough;
    private javax.swing.JPanel jPanel_hrany_laplacianGaussian;
    private javax.swing.JPanel jPanel_hrany_obrysy;
    private javax.swing.JPanel jPanel_hrany_sobel;
    private javax.swing.JPanel jPanel_kontrolaSegmentu;
    private javax.swing.JPanel jPanel_kontrolaSegmentu_maskovani;
    private javax.swing.JPanel jPanel_kontrolaSegmentu_orezAVyrovnej;
    private javax.swing.JPanel jPanel_kontrolaSegmentu_vyhodnoceni;
    private javax.swing.JPanel jPanel_morfologie_element;
    private javax.swing.JPanel jPanel_porovnani;
    private javax.swing.JPanel jPanel_rohy;
    private javax.swing.JPanel jPanel_rohy_harris;
    private javax.swing.JPanel jPanel_rohy_shiTomasi;
    private javax.swing.JPanel jPanel_toolBar_prahovani;
    private javax.swing.JPanel jPanel_toolbar_prahovani_rozdeleni;
    private javax.swing.JPanel jPanel_transformace;
    private javax.swing.JPanel jPanel_transformace_meritko;
    private javax.swing.JPanel jPanel_transformace_otoceni;
    private javax.swing.JPanel jPanel_transformace_preddef;
    private javax.swing.JPanel jPanel_transformace_translace;
    private javax.swing.JPanel jPanel_transformace_zkosit;
    private javax.swing.JRadioButton jRadioButton_porovnani_CCOEFF;
    private javax.swing.JRadioButton jRadioButton_porovnani_CCOEFFNorm;
    private javax.swing.JRadioButton jRadioButton_porovnani_CCOR;
    private javax.swing.JRadioButton jRadioButton_porovnani_CCORNorm;
    private javax.swing.JRadioButton jRadioButton_porovnani_SQDIFF;
    private javax.swing.JRadioButton jRadioButton_porovnani_SQDIFFNorm;
    private javax.swing.JRadioButton jRadioButton_toolBar_prahovani_adaptiveMeanC;
    private javax.swing.JRadioButton jRadioButton_toolBar_prahovani_adaptivniGaussianC;
    private javax.swing.JRadioButton jRadioButton_toolBar_prahovani_band;
    private javax.swing.JRadioButton jRadioButton_toolBar_prahovani_binary;
    private javax.swing.JRadioButton jRadioButton_toolBar_prahovani_otsu;
    private javax.swing.JRadioButton jRadioButton_toolBar_prahovani_tozero;
    private javax.swing.JRadioButton jRadioButton_toolbar_prahovani_binaryInv;
    private javax.swing.JRadioButton jRadioButton_toolbar_prahovani_tozeroInv;
    private javax.swing.JRadioButton jRadioButton_toolbar_prahovani_triangle;
    private javax.swing.JRadioButton jRadioButton_toolbar_prahovani_truncate;
    private javax.swing.JSlider jSlider_analyzaBarev_prevzorkuj;
    private javax.swing.JSlider jSlider_hrany_canny_dolniMez;
    private javax.swing.JSlider jSlider_hrany_canny_horniMez;
    private javax.swing.JSlider jSlider_morfologie_findThreshold;
    private javax.swing.JSlider jSlider_rohy_harris_threshold;
    private javax.swing.JSlider jSlider_rohy_shiTomasi_maxCorner;
    private javax.swing.JSlider jSlider_toolBar_prahovani_bandPrah2;
    private javax.swing.JSlider jSlider_toolBar_prahovani_blockSize;
    private javax.swing.JSlider jSlider_toolBar_prahovani_mez;
    private javax.swing.JSlider jSlider_transformace_otoceni;
    private javax.swing.JSlider jSlider_transformace_zkosit;
    private javax.swing.JSpinner jSpinner_hrany_hough_maxGap;
    private javax.swing.JSpinner jSpinner_hrany_hough_minLen;
    private javax.swing.JSpinner jSpinner_hrany_hough_prah;
    private javax.swing.JSpinner jSpinner_hrany_laplacianGaussian_gaussX;
    private javax.swing.JSpinner jSpinner_hrany_laplacianGaussian_gaussY;
    private javax.swing.JSpinner jSpinner_hrany_laplacianGaussian_laplacianHloubka;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh1x;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh1y;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh2x;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh2y;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh3x;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh3y;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh4x;
    private javax.swing.JSpinner jSpinner_kontrolaSegmentu_orez_roh4y;
    private javax.swing.JSpinner jSpinner_morfologie_elementX;
    private javax.swing.JSpinner jSpinner_morfologie_elementY;
    private javax.swing.JSpinner jSpinner_rohy_harris_blockSize;
    private javax.swing.JSpinner jSpinner_rohy_harris_vyrez;
    private javax.swing.JSpinner jSpinner_toolbar_prahovani_rozdeleniX;
    private javax.swing.JSpinner jSpinner_toolbar_prahovani_rozdeleniY;
    private javax.swing.JSpinner jSpinner_transformace_meritkoX;
    private javax.swing.JSpinner jSpinner_transformace_meritkoY;
    private javax.swing.JSpinner jSpinner_transformace_translateX;
    private javax.swing.JSpinner jSpinner_transformace_translateY;
    private javax.swing.JTabbedPane jTabbedPane_nastroje;
    private javax.swing.JTextField jTextField_hrany_laplacianGaussian_sigma;
    private javax.swing.JTextField jTextField_toolBar_prahovani_maxVal;
    private javax.swing.JTextField jTextField_toolBar_prahovani_offset;
    private javax.swing.JToggleButton jToggleButton_analyzaBarev_viewColor;
    private javax.swing.JToggleButton jToggleButton_morfologie_objektPodMysi;
    private javax.swing.JToolBar jToolBar;
    // End of variables declaration//GEN-END:variables

    private void makeShiTomasi() {
        try {
            double k = 0.04;

            int maxCorners = Math.max(jSlider_rohy_shiTomasi_maxCorner.getValue(), 1);
            MatOfPoint corners = new MatOfPoint();
            double qualityLevel = 0.01;
            double minDistance = 10;
            int blockSize = 3, gradientSize = 3;
            boolean useHarrisDetector = false;
            Mat copy = inputMat.clone();
            Imgproc.cvtColor(inputMat, copy, Imgproc.COLOR_GRAY2RGB);
            Imgproc.goodFeaturesToTrack(inputMat, corners, maxCorners, qualityLevel, minDistance, new Mat(),
                    blockSize, gradientSize, useHarrisDetector, k);
            System.out.println("** Number of corners detected: " + corners.rows());
            int[] cornersData = new int[(int) (corners.total() * corners.channels())];
            corners.get(0, 0, cornersData);
            int radius = 5;
            for (int i = 0; i < corners.rows(); i++) {
                Imgproc.circle(copy, new Point(cornersData[i * 2], cornersData[i * 2 + 1]), radius,
                        new Scalar(0, 0, 255), 2, 8, 0);
            }
            outputMat = copy;
            outputImage = MatToBufferedImage(outputMat);
            ((JPanel_DoubleImage) jPanelObrazky).setImageRight(outputImage);
            repaint();
            pack();
            jLabel_info.setText("> Number of corners detected: " + corners.rows());
        } catch (Exception exception) {
            System.err.println("CHYBA: " + exception.getMessage());
            jLabel_info.setText("> " + exception.getLocalizedMessage());
        }
    }
}
